EX_ps <- phyloseq(otu_table(seqtab12.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
View(seqtab12.nochim)
View(all.taxa)
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
# I'd like to make a stacked bar plot, before any taxa-filtering, of the read abundances
# Set function to make a proportional graph
EX_ps.func <- transform_sample_counts(EX_ps, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads - 12S")
# Warning: Removed 143 rows containing missing values or values outside the scale range (`geom_bar()`).
# Save plot
#ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
# Save plot
ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
# Config file with paths and versioning
source("AMC12S_config.R")
# Reload file with paths to previous outputs
source("AMC12S_reload.R")
# I'd like to make a stacked bar plot, before any taxa-filtering, of the read abundances
# Set function to make a proportional graph
EX_ps.func <- transform_sample_counts(EX_ps, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads - COI")
# Warning: Removed 79588 rows containing missing values or values outside the scale range (`geom_bar()`).
# Save plot
ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
# Update the all.taxa row names to be the actual sequences
all.taxa <- data.frame(all.taxa, row.names = 1)
# Order seqtab.nochim by row names
seqtabB.nochim <- seqtabB.nochim[order(row.names(seqtabB.nochim)), ]
# Order the meta file by sample name
meta <- meta[order(meta$sample), ]
# Remove the row(s) associated with dropped sample(s) from the meta spreadsheet - the only way I can do this is one row at a time
meta2 <- subset(meta, sample != "AMC22_AB01")
meta2 <- subset(meta2, sample != "AMC23_AB04")
meta2 <- subset(meta2, sample != "AMC23_MB09")
# Set the sample column as row.names
meta <- data.frame(meta2, row.names = 1)
# Order the meta file by row.names
meta <- meta[order(row.names(meta)), ]
# Make sure all samples in seqtab.nochim match and are in the same order as in meta, because the next step is a flat replacement of row.names
row.names(seqtabB.nochim) <- row.names(meta)
row.names(seqtabB.nochim)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
chek <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
View(chek)
# subset each DNA extraction batch
batch1 = subset_samples(EX_ps, Ebatch == "1")
batch2 = subset_samples(EX_ps, Ebatch == "2")
batch3 = subset_samples(EX_ps, Ebatch == "3")
batch4 = subset_samples(EX_ps, Ebatch == "4")
batch5 = subset_samples(EX_ps, Ebatch == "5")
batch6 = subset_samples(EX_ps, Ebatch == "6")
batch7 = subset_samples(EX_ps, Ebatch == "7")
batch8 = subset_samples(EX_ps, Ebatch == "8")
batch9 = subset_samples(EX_ps, Ebatch == "9")
batch10 = subset_samples(EX_ps, Ebatch == "10")
# subset controls and prune to only those taxa
batch1_sub = subset_samples(batch1, Type == "NegCon")
batch2_sub = subset_samples(batch2, Type == "NegCon")
batch3_sub = subset_samples(batch3, Type == "NegCon")
batch4_sub = subset_samples(batch4, Type == "NegCon")
batch5_sub = subset_samples(batch5, Type == "NegCon")
batch6_sub = subset_samples(batch6, Type == "NegCon")
batch7_sub = subset_samples(batch7, Type == "NegCon")
batch8_sub = subset_samples(batch8, Type == "NegCon")
batch9_sub = subset_samples(batch9, Type == "NegCon")
batch10_sub = subset_samples(batch10, Type == "NegCon")
batch1_sub <- prune_taxa(taxa_sums(batch1_sub) > 0, batch1_sub)
batch2_sub <- prune_taxa(taxa_sums(batch2_sub) > 0, batch2_sub)
batch3_sub <- prune_taxa(taxa_sums(batch3_sub) > 0, batch3_sub)
batch4_sub <- prune_taxa(taxa_sums(batch4_sub) > 0, batch4_sub)
batch5_sub <- prune_taxa(taxa_sums(batch5_sub) > 0, batch5_sub)
batch6_sub <- prune_taxa(taxa_sums(batch6_sub) > 0, batch6_sub)
batch7_sub <- prune_taxa(taxa_sums(batch7_sub) > 0, batch7_sub)
batch8_sub <- prune_taxa(taxa_sums(batch8_sub) > 0, batch8_sub)
batch9_sub <- prune_taxa(taxa_sums(batch9_sub) > 0, batch9_sub)
# Batch 10's control has no reads, can keep all of batch10
#batch10_sub <- prune_taxa(taxa_sums(batch10_sub) > 0, batch10_sub)
# Make the taxa names into a vector so you can remove them, then use the keep vector for the prune taxa argument, because it wants the argument to be true (matching), and repeat for both batches
batch1_ctrl <- as.vector(taxa_names(batch1_sub))
batch1_vec <- as.vector(taxa_names(batch1))
batch1_kp <- setdiff(batch1_vec, batch1_ctrl)
batch1_clean <- prune_taxa(batch1_kp, batch1)
batch2_ctrl <- as.vector(taxa_names(batch2_sub))
batch2_vec <- as.vector(taxa_names(batch2))
batch2_kp <- setdiff(batch2_vec, batch2_ctrl)
batch2_clean <- prune_taxa(batch2_kp, batch2)
batch3_ctrl <- as.vector(taxa_names(batch3_sub))
batch3_vec <- as.vector(taxa_names(batch3))
batch3_kp <- setdiff(batch3_vec, batch3_ctrl)
batch3_clean <- prune_taxa(batch3_kp, batch3)
batch4_ctrl <- as.vector(taxa_names(batch4_sub))
batch4_vec <- as.vector(taxa_names(batch4))
batch4_kp <- setdiff(batch4_vec, batch4_ctrl)
batch4_clean <- prune_taxa(batch4_kp, batch4)
batch5_ctrl <- as.vector(taxa_names(batch5_sub))
batch5_vec <- as.vector(taxa_names(batch5))
batch5_kp <- setdiff(batch5_vec, batch5_ctrl)
batch5_clean <- prune_taxa(batch5_kp, batch5)
batch6_ctrl <- as.vector(taxa_names(batch6_sub))
batch6_vec <- as.vector(taxa_names(batch6))
batch6_kp <- setdiff(batch6_vec, batch6_ctrl)
batch6_clean <- prune_taxa(batch6_kp, batch6)
batch7_ctrl <- as.vector(taxa_names(batch7_sub))
batch7_vec <- as.vector(taxa_names(batch7))
batch7_kp <- setdiff(batch7_vec, batch7_ctrl)
batch7_clean <- prune_taxa(batch7_kp, batch7)
batch8_ctrl <- as.vector(taxa_names(batch8_sub))
batch8_vec <- as.vector(taxa_names(batch8))
batch8_kp <- setdiff(batch8_vec, batch8_ctrl)
batch8_clean <- prune_taxa(batch8_kp, batch8)
batch9_ctrl <- as.vector(taxa_names(batch9_sub))
batch9_vec <- as.vector(taxa_names(batch9))
batch9_kp <- setdiff(batch9_vec, batch9_ctrl)
batch9_clean <- prune_taxa(batch9_kp, batch9)
# Save the phyloseq object of identified contaminants
pstrimmed <- merge_phyloseq(batch1_sub, batch2_sub, batch3_sub, batch4_sub, batch5_sub, batch6_sub, batch7_sub, batch8_sub, batch9_sub)
saveRDS(pstrimmed, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/DecontamRemoved.rds")
# Merge the phyloseq objects back together, then remove any blank taxa or samples
ps_clean <- merge_phyloseq(batch1_clean, batch2_clean, batch3_clean, batch4_clean, batch5_clean, batch6_clean, batch7_clean, batch8_clean, batch9_clean, batch10)
# Clean out taxa/SV columns that are no longer present
ps_clean <- prune_taxa(taxa_sums(ps_clean) > 0, ps_clean)
ps_clean <- prune_samples(sample_sums(ps_clean) > 0, ps_clean)
ps_clean
# Save in case R crashes again
saveRDS(ps_clean, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/Intermediate.rds")
ps_clean.stack <- transform_sample_counts(ps_clean, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(ps_clean.stack, fill="Kingdom") + ggtitle("Proportion by Kingdom of Identified Reads - COI")
# Remove plant and others
psCOI <- ps_clean %>%
subset_taxa(Kingdom != "Ascomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Bacillariophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Basidiomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Chlorophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Oomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Pseudomonadota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Rhodophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Rotifera")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Tubulinea")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Streptophyta")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
psCOI.stack <- transform_sample_counts(psCOI, function(x) x / sum(x) )
# Plot based on Class
plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png")
psCOI
ggsave("CleanedClassIDs.png", path = path_outputs, plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png") + ggtitle("COI Identified Clean Reads"), width = 8, height = 5, units = "in")
saveRDS(psCOI, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/CleanPhyloseq.RDS")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
psCOI.stack <- transform_sample_counts(psCOI, function(x) x / sum(x) )
# Plot based on Class
plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png")
psCOI
ggsave("CleanedClassIDs.png", path = path_outputs, plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png") + ggtitle("COI Identified Clean Reads"), width = 8, height = 5, units = "in")
saveRDS(psCOI, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/CleanPhyloseq.RDS")
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
row.names(all.taxa)
# Update the all.taxa row names to be the actual sequences
all.taxa <- data.frame(all.taxa, row.names = 1)
# Order seqtab.nochim by row names
seqtabB.nochim <- seqtabB.nochim[order(row.names(seqtabB.nochim)), ]
# Order the meta file by sample name
meta <- meta[order(meta$sample), ]
# Remove the row(s) associated with dropped sample(s) from the meta spreadsheet - the only way I can do this is one row at a time
meta2 <- subset(meta, sample != "AMC22_AB01")
meta2 <- subset(meta2, sample != "AMC23_AB04")
meta2 <- subset(meta2, sample != "AMC23_MB09")
# Set the sample column as row.names
meta <- data.frame(meta2, row.names = 1)
# Order the meta file by row.names
meta <- meta[order(row.names(meta)), ]
# Make sure all samples in seqtab.nochim match and are in the same order as in meta, because the next step is a flat replacement of row.names
row.names(seqtabB.nochim) <- row.names(meta)
View(meta)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
sam_data(EX_ps)
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseqUD.rds")
# subset each DNA extraction batch
batch1 = subset_samples(EX_ps, Ebatch == "1")
batch2 = subset_samples(EX_ps, Ebatch == "2")
batch3 = subset_samples(EX_ps, Ebatch == "3")
batch4 = subset_samples(EX_ps, Ebatch == "4")
batch5 = subset_samples(EX_ps, Ebatch == "5")
batch6 = subset_samples(EX_ps, Ebatch == "6")
batch7 = subset_samples(EX_ps, Ebatch == "7")
batch8 = subset_samples(EX_ps, Ebatch == "8")
batch9 = subset_samples(EX_ps, Ebatch == "9")
batch10 = subset_samples(EX_ps, Ebatch == "10")
# subset controls and prune to only those taxa
batch1_sub = subset_samples(batch1, Type == "NegCon")
batch2_sub = subset_samples(batch2, Type == "NegCon")
batch3_sub = subset_samples(batch3, Type == "NegCon")
batch4_sub = subset_samples(batch4, Type == "NegCon")
batch5_sub = subset_samples(batch5, Type == "NegCon")
batch6_sub = subset_samples(batch6, Type == "NegCon")
batch7_sub = subset_samples(batch7, Type == "NegCon")
batch8_sub = subset_samples(batch8, Type == "NegCon")
batch9_sub = subset_samples(batch9, Type == "NegCon")
batch10_sub = subset_samples(batch10, Type == "NegCon")
batch1_sub <- prune_taxa(taxa_sums(batch1_sub) > 0, batch1_sub)
batch2_sub <- prune_taxa(taxa_sums(batch2_sub) > 0, batch2_sub)
batch3_sub <- prune_taxa(taxa_sums(batch3_sub) > 0, batch3_sub)
batch4_sub <- prune_taxa(taxa_sums(batch4_sub) > 0, batch4_sub)
batch5_sub <- prune_taxa(taxa_sums(batch5_sub) > 0, batch5_sub)
batch6_sub <- prune_taxa(taxa_sums(batch6_sub) > 0, batch6_sub)
batch7_sub <- prune_taxa(taxa_sums(batch7_sub) > 0, batch7_sub)
batch8_sub <- prune_taxa(taxa_sums(batch8_sub) > 0, batch8_sub)
batch9_sub <- prune_taxa(taxa_sums(batch9_sub) > 0, batch9_sub)
# Batch 10's control has no reads, can keep all of batch10
#batch10_sub <- prune_taxa(taxa_sums(batch10_sub) > 0, batch10_sub)
# Make the taxa names into a vector so you can remove them, then use the keep vector for the prune taxa argument, because it wants the argument to be true (matching), and repeat for both batches
batch1_ctrl <- as.vector(taxa_names(batch1_sub))
batch1_vec <- as.vector(taxa_names(batch1))
batch1_kp <- setdiff(batch1_vec, batch1_ctrl)
batch1_clean <- prune_taxa(batch1_kp, batch1)
batch2_ctrl <- as.vector(taxa_names(batch2_sub))
batch2_vec <- as.vector(taxa_names(batch2))
batch2_kp <- setdiff(batch2_vec, batch2_ctrl)
batch2_clean <- prune_taxa(batch2_kp, batch2)
batch3_ctrl <- as.vector(taxa_names(batch3_sub))
batch3_vec <- as.vector(taxa_names(batch3))
batch3_kp <- setdiff(batch3_vec, batch3_ctrl)
batch3_clean <- prune_taxa(batch3_kp, batch3)
batch4_ctrl <- as.vector(taxa_names(batch4_sub))
batch4_vec <- as.vector(taxa_names(batch4))
batch4_kp <- setdiff(batch4_vec, batch4_ctrl)
batch4_clean <- prune_taxa(batch4_kp, batch4)
batch5_ctrl <- as.vector(taxa_names(batch5_sub))
batch5_vec <- as.vector(taxa_names(batch5))
batch5_kp <- setdiff(batch5_vec, batch5_ctrl)
batch5_clean <- prune_taxa(batch5_kp, batch5)
batch6_ctrl <- as.vector(taxa_names(batch6_sub))
batch6_vec <- as.vector(taxa_names(batch6))
batch6_kp <- setdiff(batch6_vec, batch6_ctrl)
batch6_clean <- prune_taxa(batch6_kp, batch6)
batch7_ctrl <- as.vector(taxa_names(batch7_sub))
batch7_vec <- as.vector(taxa_names(batch7))
batch7_kp <- setdiff(batch7_vec, batch7_ctrl)
batch7_clean <- prune_taxa(batch7_kp, batch7)
batch8_ctrl <- as.vector(taxa_names(batch8_sub))
batch8_vec <- as.vector(taxa_names(batch8))
batch8_kp <- setdiff(batch8_vec, batch8_ctrl)
batch8_clean <- prune_taxa(batch8_kp, batch8)
batch9_ctrl <- as.vector(taxa_names(batch9_sub))
batch9_vec <- as.vector(taxa_names(batch9))
batch9_kp <- setdiff(batch9_vec, batch9_ctrl)
batch9_clean <- prune_taxa(batch9_kp, batch9)
# Save the phyloseq object of identified contaminants
pstrimmed <- merge_phyloseq(batch1_sub, batch2_sub, batch3_sub, batch4_sub, batch5_sub, batch6_sub, batch7_sub, batch8_sub, batch9_sub)
saveRDS(pstrimmed, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/DecontamRemoved.rds")
check <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/DecontamRemoved.rds")
View(check)
# Merge the phyloseq objects back together, then remove any blank taxa or samples
ps_clean <- merge_phyloseq(batch1_clean, batch2_clean, batch3_clean, batch4_clean, batch5_clean, batch6_clean, batch7_clean, batch8_clean, batch9_clean, batch10)
# Clean out taxa/SV columns that are no longer present
ps_clean <- prune_taxa(taxa_sums(ps_clean) > 0, ps_clean)
ps_clean <- prune_samples(sample_sums(ps_clean) > 0, ps_clean)
ps_clean
# Save in case R crashes again
saveRDS(ps_clean, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/Intermediate.rds")
ps_clean.stack <- transform_sample_counts(ps_clean, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(ps_clean.stack, fill="Kingdom") + ggtitle("Proportion by Kingdom of Identified Reads - COI")
check2 <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/InitialPhyloseq.rds")
View(check2)
blu <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/Intermediate.rds")
View(blu)
# Remove plant and others
psCOI <- ps_clean %>%
subset_taxa(Kingdom != "Ascomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Bacillariophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Basidiomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Chlorophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Oomycota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Pseudomonadota")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Rhodophyta")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Rotifera")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Tubulinea")
psCOI <- psCOI %>%
subset_taxa(Kingdom != "Streptophyta")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
#psCOI.stack <- transform_sample_counts(psCOI, function(x) x / sum(x) )
# Plot based on Class
#plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png")
#psCOI
#ggsave("CleanedClassIDs.png", path = path_outputs, plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png") + ggtitle("COI Identified Clean Reads"), width = 8, height = 5, units = "in")
saveRDS(psCOI, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/CleanPhyloseq.RDS")
kj <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/CleanPhyloseq.RDS")
View(kj)
psCOI
rc <-as.data.frame(otu_table(psCOI))
test <- rarecurve(rc, step = 10, cex=0.5, label = TRUE)
raremax <- max(rowSums(otu_table(psCOI))) # Max SV number is 36027
raremin <- min(rowSums(otu_table(psCOI))) # Min SV number is 2098
rowSums(otu_table(psCOI))
test <- rarecurve(rc, step = 10, cex=0.5, label = FALSE)
# Config file with paths and versioning
source("AMC12S_config.R")
# Reload file with paths to previous outputs
source("AMC12S_reload.R")
row.names(all.taxa)
colnames(meta)
# Update the all.taxa row names to be the actual sequences
all.taxa <- data.frame(all.taxa, row.names = 1)
# Order seqtab12.nochim by row names
seqtab12.nochim <- seqtab12.nochim[order(row.names(seqtab12.nochim)), ]
# Remove the row(s) associated with dropped sample(s) from the meta spreadsheet
meta <- subset(meta, sample != "AMC23_C721")
# Set the sample column as row.names
meta <- data.frame(meta, row.names = 1)
# Order the meta file by row.names
meta <- meta[order(row.names(meta)), ]
# Make sure all samples in seqtab.nochim match and are in the same order as in meta, because the next step is a flat replacement of row.names
row.names(seqtab12.nochim) <- row.names(meta)
row.names(seqtab12.nochim)
row.names(meta)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtab12.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
# SAVE
saveRDS(EX_ps, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/InitialPhyloseq.rds")
sdf <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/InitialPhyloseq.rds")
View(sdf)
# subset each DNA extraction batch
batch1 = subset_samples(EX_ps, Ebatch == "1")
batch2 = subset_samples(EX_ps, Ebatch == "2")
batch3 = subset_samples(EX_ps, Ebatch == "3")
batch4 = subset_samples(EX_ps, Ebatch == "4")
batch5 = subset_samples(EX_ps, Ebatch == "5")
batch6 = subset_samples(EX_ps, Ebatch == "6")
batch7 = subset_samples(EX_ps, Ebatch == "7")
batch8 = subset_samples(EX_ps, Ebatch == "8")
batch9 = subset_samples(EX_ps, Ebatch == "9")
batch10 = subset_samples(EX_ps, Ebatch == "10")
# subset controls and prune to only those taxa
batch1_sub = subset_samples(batch1, Type == "NegCon")
batch2_sub = subset_samples(batch2, Type == "NegCon")
batch3_sub = subset_samples(batch3, Type == "NegCon")
batch4_sub = subset_samples(batch4, Type == "NegCon")
batch5_sub = subset_samples(batch5, Type == "NegCon")
batch6_sub = subset_samples(batch6, Type == "NegCon")
batch7_sub = subset_samples(batch7, Type == "NegCon")
batch8_sub = subset_samples(batch8, Type == "NegCon")
batch9_sub = subset_samples(batch9, Type == "NegCon")
batch10_sub = subset_samples(batch10, Type == "NegCon")
batch1_sub <- prune_taxa(taxa_sums(batch1_sub) > 0, batch1_sub)
batch2_sub <- prune_taxa(taxa_sums(batch2_sub) > 0, batch2_sub)
batch3_sub <- prune_taxa(taxa_sums(batch3_sub) > 0, batch3_sub)
batch4_sub <- prune_taxa(taxa_sums(batch4_sub) > 0, batch4_sub)
batch5_sub <- prune_taxa(taxa_sums(batch5_sub) > 0, batch5_sub)
batch6_sub <- prune_taxa(taxa_sums(batch6_sub) > 0, batch6_sub)
batch7_sub <- prune_taxa(taxa_sums(batch7_sub) > 0, batch7_sub)
batch8_sub <- prune_taxa(taxa_sums(batch8_sub) > 0, batch8_sub)
batch9_sub <- prune_taxa(taxa_sums(batch9_sub) > 0, batch9_sub)
batch10_sub <- prune_taxa(taxa_sums(batch10_sub) > 0, batch10_sub)
# Make the taxa names into a vector so you can remove them, then use the keep vector for the prune taxa argument, because it wants the argument to be true (matching), and repeat for both batches
batch1_ctrl <- as.vector(taxa_names(batch1_sub))
batch1_vec <- as.vector(taxa_names(batch1))
batch1_kp <- setdiff(batch1_vec, batch1_ctrl)
batch1_clean <- prune_taxa(batch1_kp, batch1)
batch2_ctrl <- as.vector(taxa_names(batch2_sub))
batch2_vec <- as.vector(taxa_names(batch2))
batch2_kp <- setdiff(batch2_vec, batch2_ctrl)
batch2_clean <- prune_taxa(batch2_kp, batch2)
batch3_ctrl <- as.vector(taxa_names(batch3_sub))
batch3_vec <- as.vector(taxa_names(batch3))
batch3_kp <- setdiff(batch3_vec, batch3_ctrl)
batch3_clean <- prune_taxa(batch3_kp, batch3)
batch4_ctrl <- as.vector(taxa_names(batch4_sub))
batch4_vec <- as.vector(taxa_names(batch4))
batch4_kp <- setdiff(batch4_vec, batch4_ctrl)
batch4_clean <- prune_taxa(batch4_kp, batch4)
batch5_ctrl <- as.vector(taxa_names(batch5_sub))
batch5_vec <- as.vector(taxa_names(batch5))
batch5_kp <- setdiff(batch5_vec, batch5_ctrl)
batch5_clean <- prune_taxa(batch5_kp, batch5)
batch6_ctrl <- as.vector(taxa_names(batch6_sub))
batch6_vec <- as.vector(taxa_names(batch6))
batch6_kp <- setdiff(batch6_vec, batch6_ctrl)
batch6_clean <- prune_taxa(batch6_kp, batch6)
batch7_ctrl <- as.vector(taxa_names(batch7_sub))
batch7_vec <- as.vector(taxa_names(batch7))
batch7_kp <- setdiff(batch7_vec, batch7_ctrl)
batch7_clean <- prune_taxa(batch7_kp, batch7)
batch8_ctrl <- as.vector(taxa_names(batch8_sub))
batch8_vec <- as.vector(taxa_names(batch8))
batch8_kp <- setdiff(batch8_vec, batch8_ctrl)
batch8_clean <- prune_taxa(batch8_kp, batch8)
batch9_ctrl <- as.vector(taxa_names(batch9_sub))
batch9_vec <- as.vector(taxa_names(batch9))
batch9_kp <- setdiff(batch9_vec, batch9_ctrl)
batch9_clean <- prune_taxa(batch9_kp, batch9)
batch10_ctrl <- as.vector(taxa_names(batch10_sub))
batch10_vec <- as.vector(taxa_names(batch10))
batch10_kp <- setdiff(batch10_vec, batch10_ctrl)
batch10_clean <- prune_taxa(batch10_kp, batch10)
# Save the phyloseq object of identified contaminants
pstrimmed <- merge_phyloseq(batch1_sub, batch2_sub, batch3_sub, batch4_sub, batch5_sub, batch6_sub, batch7_sub, batch8_sub, batch9_sub, batch10_sub)
saveRDS(pstrimmed, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/DecontamRemoved.rds")
sdfs <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/DecontamRemoved.rds")
View(sdfs)
ps_clean <- merge_phyloseq(batch1_clean, batch2_clean, batch3_clean, batch4_clean, batch5_clean, batch6_clean, batch7_clean, batch8_clean, batch9_clean, batch10_clean)
# Clean out taxa/SV columns that are no longer present
ps_clean <- prune_taxa(taxa_sums(ps_clean) > 0, ps_clean)
ps_clean <- prune_samples(sample_sums(ps_clean) > 0, ps_clean)
ps_clean
# Remove plant and others
ps12S <- ps_clean %>%
subset_taxa(Kingdom != "Bacillota")
ps12S <- ps12S %>%
subset_taxa(Kingdom != "Chlorophyta")
ps12S <- ps12S %>%
subset_taxa(Kingdom != "Cyanobacteriota")
ps12S <- ps12S %>%
subset_taxa(Kingdom != "Pseudomonadota")
ps12S <- ps12S %>%
subset_taxa(Kingdom != "Foraminifera")
ps12S <- ps12S %>%
subset_taxa(Kingdom != "Streptophyta")
ps12S <- prune_taxa(taxa_sums(ps12S) > 0, ps12S)
ps12S <- prune_samples(sample_sums(ps12S) > 0, ps12S)
ps12S
saveRDS(ps12S, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/CleanPhyloseq.RDS")
qwe <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/CleanPhyloseq.RDS")
View(qwe)
rc <-as.data.frame(otu_table(ps12))
rc <-as.data.frame(otu_table(ps12S))
test <- rarecurve(rc, step = 10, cex=0.5, label = TRUE)
raremax <- max(rowSums(otu_table(ps12S))) # Max SV number is 36027
raremin <- min(rowSums(otu_table(ps12S))) # Min SV number is 2098
rowSums(otu_table(ps12S))
test <- rarecurve(rc, step = 10, cex=0.5, label = FALSE)
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
colnames(tax_table(ps_clean))
# Remove plant and others
psCOI <- ps_clean %>%
subset_taxa(Phylum != "Ascomycota")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Bacillariophyta")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Basidiomycota")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Chlorophyta")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Oomycota")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Pseudomonadota")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Rhodophyta")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Rotifera")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Tubulinea")
psCOI <- psCOI %>%
subset_taxa(Phylum != "Streptophyta")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
psCOI.stack <- transform_sample_counts(psCOI, function(x) x / sum(x) )
# Plot based on Class
plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png")
psCOI
ggsave("CleanedClassIDs.png", path = path_outputs, plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png") + ggtitle("COI Identified Clean Reads"), width = 8, height = 5, units = "in")
saveRDS(psCOI, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/CleanPhyloseq.RDS")
rc <-as.data.frame(otu_table(psCOI))
test <- rarecurve(rc, step = 10, cex=0.5, label = FALSE)
raremax <- max(rowSums(otu_table(psCOI))) # Max SV number is 35078
raremin <- min(rowSums(otu_table(psCOI))) # Min SV number is 3
rowSums(otu_table(psCOI))
