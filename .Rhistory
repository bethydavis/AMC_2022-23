filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") +  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
# View plot
filttrend12sync
View(filtout12sync)
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 45))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1,size = 10))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + scale_x_discrete(labels = label_wrap(10))
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, size = 20)))
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, size = 20))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, size = 10))
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = "none")
# View plot
filttrend12sync
# Make plot
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads") + theme(axis.text.x = element_blank()) + labs(x = "Sample")
# View plot
filttrend12sync
path_outputs <- "C:/Users/bydav/Desktop/ThesisFigs/AMC"
path_outputs
# Save
ggsave("FilterTrends_12Sync.png", plot = filttrend12sync, path = path_outputs, width = 6, height = 4, units = "in")
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
filttrendB <- ggplot(as.data.frame(filtoutB)) + geom_point(aes(row.names(filtoutB), reads.in), color = "blue") + geom_point(aes(row.names(filtoutB), reads.out), color = "orange") + ggtitle("Filter Trends for AMC BF2/BR2 Reads") + theme(axis.text.x = element_blank()) + labs(x = "Sample")
# View plot
filttrendB
path_outputs <- "C:/Users/bydav/Desktop/ThesisFigs/AMC"
# Save plot
ggsave("FilterTrends.png", plot = filttrendB, path = path_outputs, width = 6, height = 4, units = "in")
# config file with paths and versioning
source("AMCCOI_config.R")
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
View(trackB)
path_outputs
View(trackB)
outcome <- sub("_[^_]+$", "", trackB$X)
outcome
# Clean up sample names
names <- sub("_[^_]+$", "", trackB$X)
row.names(trackB) <- names
View(trackB)
# Plot filter trends
workver <- ggplot(as.data.frame(trackB)) +
geom_point(aes(row.names(trackB), input), color = "gold", size = 2.5) +
geom_point(aes(row.names(trackB), filtered), color = "yellowgreen") +
geom_point(aes(row.names(trackB), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(trackB), denoisedR), color = "blue") +
geom_point(aes(row.names(trackB), merged), color = "darkblue") +
geom_point(aes(row.names(trackB), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_blank()) +
ggtitle("Workflow Progression for AMC BF2/BR2 Reads") + labs(x = "Sample", y = "Number of Reads")
workver
# Save plot
ggsave("WorkflowVerificationCOI.png", plot = workver, path = path_outputs, width = 6, height = 4, units = "in")
plot_bar(psCOI.stack, fill="Class") + ggtitle("Proportion of Cleaned Reads by Class.png")
psCOI
psCOI.class <- plot_bar(psCOI.stack, fill="Class") +
ggtitle("COI Identified Clean Reads") +
labs(x = "Sample", y = "ASV Proportion") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
psCOI.class
ggsave("CleanedClassIDs.png", path = path_outputs, psCOI.class, width = 8, height = 5, units = "in")
psCOI.class <- plot_bar(psCOI.stack, fill="Class") +
ggtitle("COI Identified Clean Reads") +
labs(x = "Sample", y = "ASV Proportion") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +
theme(axis.title.x = element_blank())
psCOI.class
ggsave("CleanedClassIDs.png", path = path_outputs, psCOI.class, width = 8, height = 5, units = "in")
# Save plot
ggsave("WorkflowVerificationCOI.png", plot = workver, path = path_outputs, width = 6, height = 4, units = "in")
# Config file with paths and versioning
source("AMC12S_config.R")
# Reload file with paths to previous outputs
source("AMC12S_reload.R")
View(track12)
# Clean up sample names
names <- sub("_[^_]+$", "", track12$X)
row.names(track12) <- names
View(track12)
workver <- ggplot(as.data.frame(track12)) +
geom_point(aes(row.names(track12), input), color = "gold", size = 2.5) +
geom_point(aes(row.names(track12), filtered), color = "yellowgreen") +
geom_point(aes(row.names(track12), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(track12), denoisedR), color = "blue") +
geom_point(aes(row.names(track12), merged), color = "darkblue") +
geom_point(aes(row.names(track12), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_blank()) +
ggtitle("Workflow Progression for AMC 12S Reads") + labs(x = "Sample", y = "Number of Reads")
workver
# Save plot
ggsave("WorkflowVerificationCOI.png", plot = workver, path = path_outputs, width = 6, height = 4, units = "in")
ps12.class <- plot_bar(ps12.stack, fill="Class") +
ggtitle("12S Identified Clean Reads") +
labs(x = "Sample", y = "ASV Proportion") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +
theme(axis.title.x = element_blank())
ps12S.stack <- transform_sample_counts(ps12S, function(x) x / sum(x) )
# Plot based on Class
ps12.class <- plot_bar(ps12.stack, fill="Class") +
ggtitle("12S Identified Clean Reads") +
labs(x = "Sample", y = "ASV Proportion") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +
theme(axis.title.x = element_blank())
ps12.class <- plot_bar(ps12S.stack, fill="Class") +
ggtitle("12S Identified Clean Reads") +
labs(x = "Sample", y = "ASV Proportion") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +
theme(axis.title.x = element_blank())
ps12.class
ggsave("CleanedClassIDs.png", path = path_outputs, ps12.class, width = 8, height = 5, units = "in")
library(phylosmith)
source("AMCJoint_config.R")
psCOI <- psCOI %>%
subset_taxa(Species != "Homo sapiens")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
ps12 <- ps12 %>%
subset_taxa(Species != "Homo sapiens")
ps12 <- prune_taxa(taxa_sums(ps12) > 0, ps12)
ps12 <- prune_samples(sample_sums(ps12) > 0, ps12)
ggsave("AMC12S_Gamma.png", path = path_outputs, plot_bar(ps12.fam, fill="Family") + facet_grid(~Year, scales= "free_x", space = "free_x") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + labs(x = "Site", y = "Number of ASVs", title = "12S Overall Diversity")  + scale_colour_brewer(palette = "Set1") + theme(legend.position = "bottom"), width = 8, height = 7, units = "in")
ggsave("AMCCOI_Gamma.png", path = path_outputs, plot_bar(psCOI.fam, fill="Family") + facet_grid(~Year, scales= "free_x", space = "free_x") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + labs(x = "Site", y = "Number of ASVs", title = "COI Overall Diversity")  + scale_colour_brewer(palette = "Set1") + theme(legend.position = "bottom"), width = 8, height = 10, units = "in")
# Plot alpha diversity metrics
richCOIp <- plot_richness(psCOI, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "COI Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none") + theme(axis.text = element_text(size = 11))
richCOIp
# Plot alpha diversity metrics
richCOIp <- plot_richness(psCOI, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "COI Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none") #+ theme(axis.text = element_text(size = 11))
richCOIp
# Plot alpha diversity metrics
richCOIp <- plot_richness(psCOI, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "COI Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none") + theme(axis.text = element_text(size = 11))
rich12p <- plot_richness(ps12, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "12S Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none")  + theme(axis.text = element_text(size = 11))
ggsave("AMCCOI_AlphaDiversity.png", path = path_outputs, plot = richCOIp, width = 10, height = 5, units = "in")
ggsave("AMC12S_AlphaDiversity.png", path = path_outputs, plot = rich12p, width = 10, height = 5, units = "in")
# Plot alpha diversity metrics
richCOIp <- plot_richness(psCOI, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "COI Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none") + theme(axis.text = element_text(size = 11))
richCOIp
rich12p <- plot_richness(ps12, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "12S Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none")  + theme(axis.text = element_text(size = 11))
# Save plots
ggsave("AMCCOI_AlphaDiversity.png", path = path_outputs, plot = richCOIp, width = 10, height = 5, units = "in")
ggsave("AMC12S_AlphaDiversity.png", path = path_outputs, plot = rich12p, width = 10, height = 5, units = "in")
path_outputs
richCOIp <- plot_richness(psCOI, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "COI Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none") + theme(axis.text = element_text(size = 12))
rich12p <- plot_richness(ps12, x = "TreatType", color = "TreatType", measures = c("Chao1", "Shannon", "Simpson")) + geom_boxplot()  + theme_bw() + labs(title = "12S Alpha Diversity Measures", x = "LWA Treatment Type") + theme(axis.title.y = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) + theme(legend.position = "none")  + theme(axis.text = element_text(size = 12))
ggsave("AMCCOI_AlphaDiversity.png", path = path_outputs, plot = richCOIp, width = 10, height = 5, units = "in")
ggsave("AMC12S_AlphaDiversity.png", path = path_outputs, plot = rich12p, width = 10, height = 5, units = "in")
library(phylosmith)
source("AMCJoint_config.R")
psCOI <- psCOI %>%
subset_taxa(Species != "Homo sapiens")
psCOI <- prune_taxa(taxa_sums(psCOI) > 0, psCOI)
psCOI <- prune_samples(sample_sums(psCOI) > 0, psCOI)
ps12 <- ps12 %>%
subset_taxa(Species != "Homo sapiens")
ps12 <- prune_taxa(taxa_sums(ps12) > 0, ps12)
ps12 <- prune_samples(sample_sums(ps12) > 0, ps12)
View(meltCOIun)
library(abind)
detach("package:abind", unload = TRUE)
workver <- ggplot(as.data.frame(trackB)) +
geom_point(aes(row.names(trackB), input), color = "gold", size = 2.5) +
geom_point(aes(row.names(trackB), filtered), color = "yellowgreen") +
geom_point(aes(row.names(trackB), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(trackB), denoisedR), color = "blue") +
geom_point(aes(row.names(trackB), merged), color = "darkblue") +
geom_point(aes(row.names(trackB), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
Contaminants <- readRDS("C:/Users/bydav/Desktop/GitHub/AMC_2022-23/Data/V1_Output/12S/InterimObjects/Contaminants.rds")
View(Contaminants)
Contaminants@tax_table
library(phyloseq)
library(phyloseq)
plot_bar(Contaminants, x = Type, y = Species)
plot_bar(Contaminants, x = "Type")
plot_bar(Contaminants, x = "Type", y = "Species")
plot_bar(Contaminants, x = "Species")
## CONFIGURATION
# The following lines set package, path, and versioning information for analyzing the raw fastq files
# Identify packages to use
packages = list(
CRAN = c("ggplot2", "vegan", "dplyr", "viridis", "ggpubr", "fossil", "paletteer", "tidyverse", "imager", "rmarkdown", "beepr", "stringr", "decontam"),
bioc = c("BiocManager", "dada2", "phyloseq"),
github = c()
)
# Manage installations as needed
installed = installed.packages() |> rownames()
for (pkg in packages$CRAN){
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org/", update = FALSE)
}
for (pkg in packages$bioc){
if (!pkg %in% installed) BiocManager::install(pkg, update = FALSE)
}
for (pkg in names(packages$github)){
if (!pkg %in% installed) remotes::install_github(file.path(packages$github[pkg], pkg), update = FALSE)
}
# Load packages from library, quietly
suppressPackageStartupMessages({
for (p in packages$CRAN) library(p, character.only = TRUE)
for (p in packages$bioc) library(p, character.only = TRUE)
for (p in names(packages$github)) library(p, character.only = TRUE)
})
## CONFIGURATION
# The following lines set package, path, and versioning information for analyzing the raw fastq files
# Identify packages to use
packages = list(
CRAN = c("ggplot2", "vegan", "dplyr", "viridis", "ggpubr", "fossil", "paletteer", "tidyverse", "imager", "rmarkdown", "beepr", "stringr"),
bioc = c("BiocManager", "dada2", "phyloseq", "decontam"),
github = c()
)
# Manage installations as needed
installed = installed.packages() |> rownames()
for (pkg in packages$CRAN){
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org/", update = FALSE)
}
for (pkg in packages$bioc){
if (!pkg %in% installed) BiocManager::install(pkg, update = FALSE)
}
for (pkg in names(packages$github)){
if (!pkg %in% installed) remotes::install_github(file.path(packages$github[pkg], pkg), update = FALSE)
}
# Load packages from library, quietly
suppressPackageStartupMessages({
for (p in packages$CRAN) library(p, character.only = TRUE)
for (p in packages$bioc) library(p, character.only = TRUE)
for (p in names(packages$github)) library(p, character.only = TRUE)
})
### Set the base location:
base <- "Data/Outputs/"
### Set the date in MM-DD-YY format:
date <- "06-10-25"
### Set the primer identification:
primerM <- "12S"
primerC <- "COIB"
### Set the type of folder, for figures or interim objects:
interim <- "InterimObjects"
figures <- "Figures"
### Combine the strings to make each of our desired output folders, and create the folders if they donʻt already exist
#### Create output folders for 12S
path_outM <- paste(base, date, primerM, interim, sep = "/")
path_figM <- paste(base, date, primerM, figures, sep = "/")
#### Create output folders for COI
path_outC <- paste(base, date, primerC, interim, sep = "/")
path_figC <- paste(base, date, primerC, figures, sep = "/")
#### Make the directories
dir.create(path_outM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_outC, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figC, showWarnings = FALSE, recursive = TRUE)
path_outM
### Set the base location:
base <- "Data/Outputs"
### Set the date in MM-DD-YY format:
date <- "06-10-25"
### Set the primer identification:
primerM <- "12S"
primerC <- "COIB"
### Set the type of folder, for figures or interim objects:
interim <- "InterimObjects"
figures <- "Figures"
### Combine the strings to make each of our desired output folders, and create the folders if they donʻt already exist
#### Create output folders for 12S
path_outM <- paste(base, date, primerM, interim, sep = "/")
path_figM <- paste(base, date, primerM, figures, sep = "/")
#### Create output folders for COI
path_outC <- paste(base, date, primerC, interim, sep = "/")
path_figC <- paste(base, date, primerC, figures, sep = "/")
#### Make the directories
dir.create(path_outM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_outC, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figC, showWarnings = FALSE, recursive = TRUE)
### Set the path for the newly made directories:
path_outC
### Set the base location:
base <- "Data/Outputs"
### Set the date in MM-DD-YY format:
date <- "06-10-25"
### Set the primer identification:
primerM <- "12S"
primerB <- "COIB"
### Set the type of folder, for figures or interim objects:
interim <- "InterimObjects"
figures <- "Figures"
### Combine the strings to make each of our desired output folders, and create the folders if they donʻt already exist
#### Create output folders for 12S
path_outM <- paste(base, date, primerM, interim, sep = "/")
path_figM <- paste(base, date, primerM, figures, sep = "/")
#### Create output folders for COI
path_outB <- paste(base, date, primerB, interim, sep = "/")
path_figB <- paste(base, date, primerB, figures, sep = "/")
#### Make the directories
dir.create(path_outM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figM, showWarnings = FALSE, recursive = TRUE)
dir.create(path_outB, showWarnings = FALSE, recursive = TRUE)
dir.create(path_figB, showWarnings = FALSE, recursive = TRUE)
## Set Raw, Filtered, and Metadata Locations
### Lastly, we set the paths for where the raw sequence files are, where filtered files should go, and where the metadata sheet is
#### Set raw paths for each set of raw files
path_rawMF <- "Data/Raw/12S/Read1"
path_rawMR <- "Date/Raw/12S/Read2"
path_rawBF <- "Data/Raw/COIB/Read1"
path_rawBR <- "Data/Raw/COIB/Read2"
#### Set folder locations for the filtered sequence files (this once again involves combining strings)
forward <- "Forward"
reverse <- "Reverse"
path_filtMF <- paste(path_outM, forward, sep = "/")
path_filtMR <- paste(path_outM, reverse, sep = "/")
path_filtBF <- paste(path_outB, forward, sep = "/")
path_filtBR <- paste(path_outB, reverse, sep = "/")
# Create the filter folders if they don't already exist
dir.create(path_filtMF, recursive = TRUE, showWarnings = FALSE)
dir.create(path_filtMR, recursive = TRUE, showWarnings = FALSE)
dir.create(path_filtBF, recursive = TRUE, showWarnings = FALSE)
dir.create(path_filtBR, recursive = TRUE, showWarnings = FALSE)
### Set the location of the metadata file
meta <- read.csv("Data/Input/AMCMeta.csv", header = TRUE)
# load config file
source(config.R)
# load config file
source(Data/config.R)
# load config file
source("config.R")
# load config file
source("R/config.R")
fnsMF <- list.files(path_rawMF)
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
fastqsMR
fnsMR
path_rawMR
# load config file
source("R/config.R")
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
fastqsMR
fastqs12F <- tools::file_path_sans_ext(basename(fastqs12F))
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
# Repeat file_path_sans_ext to also remove the .fastq
idMF <- tools::file_path_sans_ext(idMF)
idMF
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
fastqsBR
plotQualityProfile(fnsMF, aggregate = T)
plotQualityProfile(fastqsMF, aggregate = T)
fastqsMF
plotQualityProfile(fastqsMF[2])
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsMFqual <- file.path(path_rawMF, fastqsMF)
plotQualityProfile(fnsMFqual, aggregate = TRUE)
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF <- tools::file_path_sans_ext(idMF)
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
##
idBF <- tools::file_path_sans_ext(basename(fastqsBF))
idBF <- tools::file_path_sans_ext(idBF)
##
idBR <- tools::file_path_sans_ext(basename(fastqsBR))
idBR <- tools::file_path_sans_ext(idBR)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MR <- file.path(path_rawMR, fastqsMR)
fastqpath_BF <- file.path(path_rawBF, fastqsBF)
fastqpath_BR <- file.path(path_rawBR, fastqsBR)
# Create aggregate quality profile plots for each primer and direction
ggsave("AggQuality_12Forward.png", path = path_figM, plot = plotQualityProfile(fastqpath_MF, aggregate = TRUE), width = 6, height = 4, units = "in")
path_figM
# Create aggregate quality profile plots for each primer and direction
ggsave("AggQuality_12Forward.png", path = path_figM, plot = plotQualityProfile(fastqpath_MF, aggregate = TRUE), width = 6, height = 4, units = "in")
# Create aggregate quality profile plots for each primer and direction
ggsave("AggQuality_12Forward.png", path = path_figM, plot = plotQualityProfile(fastqpath_MF, aggregate = TRUE), width = 6, height = 4, units = "in")
# Create aggregate quality profile plots for each primer and direction
AggQualMF <- plotQualityProfile(fastqpath_MF, aggregate = TRUE)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
# Create aggregate quality profile plots for each primer and direction
AggQualMF <- plotQualityProfile(fastqpath_MF, aggregate = TRUE)
# load config file
source("R/config.R")
###########################################
# Specify file name formats
fnsMF <- list.files(path_rawMF)
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
##
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
##
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF <- tools::file_path_sans_ext(idMF)
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
##
idBF <- tools::file_path_sans_ext(basename(fastqsBF))
idBF <- tools::file_path_sans_ext(idBF)
##
idBR <- tools::file_path_sans_ext(basename(fastqsBR))
idBR <- tools::file_path_sans_ext(idBR)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MR <- file.path(path_rawMR, fastqsMR)
fastqpath_BF <- file.path(path_rawBF, fastqsBF)
fastqpath_BR <- file.path(path_rawBR, fastqsBR)
# Create aggregate quality profile plots for each primer and direction
AggQualMF <- plotQualityProfile(fastqpath_MF, aggregate = TRUE)
filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_F_filt.fastq.gz"))
filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_R_filt.fastq.gz"))
filtMF
filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_filt.fastq.gz"))
filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_filt.fastq.gz"))
filtMF
filtMR
filtBF <- file.path(path_filtBF, "filtered", paste0(idBF, "_filt.fastq.gz"))
filtBR <- file.path(path_filtBR, "filtered", paste0(idBR, "_filt.fastq.gz"))
source("R/config.R")
###########################################
# Specify file name formats
fnsMF <- list.files(path_rawMF)
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
##
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
##
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF <- tools::file_path_sans_ext(idMF)
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
##
idBF <- tools::file_path_sans_ext(basename(fastqsBF))
idBF <- tools::file_path_sans_ext(idBF)
##
idBR <- tools::file_path_sans_ext(basename(fastqsBR))
idBR <- tools::file_path_sans_ext(idBR)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MR <- file.path(path_rawMR, fastqsMR)
##
fastqpath_BF <- file.path(path_rawBF, fastqsBF)
fastqpath_BR <- file.path(path_rawBR, fastqsBR)
# Set string for filtered sequence names
#filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_filt.fastq.gz"))
#filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_filt.fastq.gz"))
##
#filtBF <- file.path(path_filtBF, "filtered", paste0(idBF, "_filt.fastq.gz"))
#filtBR <- file.path(path_filtBR, "filtered", paste0(idBR, "_filt.fastq.gz"))
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, paste0(idMF, "filt.fastq.gz")), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, paste0(idMR, "filt.fastq.gz")), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, paste0(idMF, "_filt.fastq.gz")), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, paste0(idMR, "_filt.fastq.gz")), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
print("Finished filtering 12S sequences")
##
filtB <- filterAndTrim(file.path(path_rawBF, fastqsBF), file.path(path_filtBF, paste0(namesBF, "_filt.fastq.gz")), file.path(path_rawBR, fastqsBR), file.path(path_filtBR, paste0(namesBR, "_filt.fastq.gz")), trimLeft = c(20,20), trimRight=c(20,50), maxN=0, maxEE=c(2,2), verbose=TRUE)
filtB <- filterAndTrim(file.path(path_rawBF, fastqsBF), file.path(path_filtBF, paste0(idBF, "_filt.fastq.gz")), file.path(path_rawBR, fastqsBR), file.path(path_filtBR, paste0(idBR, "_filt.fastq.gz")), trimLeft = c(20,20), trimRight=c(20,50), maxN=0, maxEE=c(2,2), verbose=TRUE)
print("Finished filtering COI sequences")
# MANUAL: Save outputs
saveRDS(filtM, "Data/Outputs/6-10-25/12S/InterimObjects/FiltOutput.rds")
saveRDS(filtM, "Data/Outputs/06-10-25/12S/InterimObjects/FiltOutput.rds")
saveRDS(filtB, "Data/Outputs/06-10-25/COIB/InterimObjects/FiltOutput.rds")
AggQualMT <- plotQualityProfile(filtM, aggregate = TRUE)
# Create aggregate quality profile plots for each primer and direction
plotQualityProfile(filtM, aggregate = TRUE)
