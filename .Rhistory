fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
##
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
##
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF <- tools::file_path_sans_ext(idMF)
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
##
idBF <- tools::file_path_sans_ext(basename(fastqsBF))
idBF <- tools::file_path_sans_ext(idBF)
##
idBR <- tools::file_path_sans_ext(basename(fastqsBR))
idBR <- tools::file_path_sans_ext(idBR)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MR <- file.path(path_rawMR, fastqsMR)
fastqpath_BF <- file.path(path_rawBF, fastqsBF)
fastqpath_BR <- file.path(path_rawBR, fastqsBR)
# Create aggregate quality profile plots for each primer and direction
AggQualMF <- plotQualityProfile(fastqpath_MF, aggregate = TRUE)
filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_F_filt.fastq.gz"))
filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_R_filt.fastq.gz"))
filtMF
filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_filt.fastq.gz"))
filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_filt.fastq.gz"))
filtMF
filtMR
filtBF <- file.path(path_filtBF, "filtered", paste0(idBF, "_filt.fastq.gz"))
filtBR <- file.path(path_filtBR, "filtered", paste0(idBR, "_filt.fastq.gz"))
source("R/config.R")
###########################################
# Specify file name formats
fnsMF <- list.files(path_rawMF)
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
##
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
##
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF <- tools::file_path_sans_ext(idMF)
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
##
idBF <- tools::file_path_sans_ext(basename(fastqsBF))
idBF <- tools::file_path_sans_ext(idBF)
##
idBR <- tools::file_path_sans_ext(basename(fastqsBR))
idBR <- tools::file_path_sans_ext(idBR)
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MR <- file.path(path_rawMR, fastqsMR)
##
fastqpath_BF <- file.path(path_rawBF, fastqsBF)
fastqpath_BR <- file.path(path_rawBR, fastqsBR)
# Set string for filtered sequence names
#filtMF <- file.path(path_filtMF, "filtered", paste0(idMF, "_filt.fastq.gz"))
#filtMR <- file.path(path_filtMR, "filtered", paste0(idMR, "_filt.fastq.gz"))
##
#filtBF <- file.path(path_filtBF, "filtered", paste0(idBF, "_filt.fastq.gz"))
#filtBR <- file.path(path_filtBR, "filtered", paste0(idBR, "_filt.fastq.gz"))
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, paste0(idMF, "filt.fastq.gz")), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, paste0(idMR, "filt.fastq.gz")), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, paste0(idMF, "_filt.fastq.gz")), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, paste0(idMR, "_filt.fastq.gz")), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
print("Finished filtering 12S sequences")
##
filtB <- filterAndTrim(file.path(path_rawBF, fastqsBF), file.path(path_filtBF, paste0(namesBF, "_filt.fastq.gz")), file.path(path_rawBR, fastqsBR), file.path(path_filtBR, paste0(namesBR, "_filt.fastq.gz")), trimLeft = c(20,20), trimRight=c(20,50), maxN=0, maxEE=c(2,2), verbose=TRUE)
filtB <- filterAndTrim(file.path(path_rawBF, fastqsBF), file.path(path_filtBF, paste0(idBF, "_filt.fastq.gz")), file.path(path_rawBR, fastqsBR), file.path(path_filtBR, paste0(idBR, "_filt.fastq.gz")), trimLeft = c(20,20), trimRight=c(20,50), maxN=0, maxEE=c(2,2), verbose=TRUE)
print("Finished filtering COI sequences")
# MANUAL: Save outputs
saveRDS(filtM, "Data/Outputs/6-10-25/12S/InterimObjects/FiltOutput.rds")
saveRDS(filtM, "Data/Outputs/06-10-25/12S/InterimObjects/FiltOutput.rds")
saveRDS(filtB, "Data/Outputs/06-10-25/COIB/InterimObjects/FiltOutput.rds")
AggQualMT <- plotQualityProfile(filtM, aggregate = TRUE)
# Create aggregate quality profile plots for each primer and direction
plotQualityProfile(filtM, aggregate = TRUE)
### Set the location of the metadata file
meta <- read.csv("Data/Input/AMCMeta.csv", header = TRUE)
head(meta)
# load config file
source("R/config.R")
# Specify file name formats
fnsMF <- list.files(path_rawMF)
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)]
fnsMF
fastqsMF
# Set sample names to a vector, remove path and the .gz extension
idMF <- tools::file_path_sans_ext(basename(fastqsMF))
idMF
idMF <- tools::file_path_sans_ext(idMF)
idMF
# Create another object to list the path to the fastq files
fastqpath_MF <- file.path(path_rawMF, fastqsMF)
fastqpath_MF
# Clean up name code further
idMF <- gsub("_MR1", "", idMF)
idMF
# Clean up name code further
idMF <- gsub("_MR1", "", fastqsMF)
idMF
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, idMF), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, idMR), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
idMR <- gsub("_MR1", "", fastqsMR)
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, idMF), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, idMR), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
idMF <- gsub("_MR1", "", fastqsMF)
idMR <- gsub("_MR2", "", fastqsMR)
idMF <- paste0(idMF, "_MF1")
idMR <- paste0(idMR, "_MF2")
idMF
idMF <- tools::file_path_sans_ext(basename(fastqsMF)) # removes the .gz
idMF <- tools::file_path_sans_ext(idMF) # removes the .fastq
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
idMF <- gsub("_MR1", "", fastqsMF)
idMR <- gsub("_MR2", "", fastqsMR)
idMF <- paste0(idMF, "_MF1")
idMR <- paste0(idMR, "_MF2")
idMF
idMF <- tools::file_path_sans_ext(basename(fastqsMF)) # removes the .gz
idMF <- tools::file_path_sans_ext(idMF) # removes the .fastq
##
idMR <- tools::file_path_sans_ext(basename(fastqsMR))
idMR <- tools::file_path_sans_ext(idMR)
idMF <- gsub("_MR1", "", idMF)
idMR <- gsub("_MR2", "", idMR)
idMF <- paste0(idMF, "_MF1")
idMR <- paste0(idMR, "_MF2")
idMF
idMF <- gsub("_MR1", "_MF1", fastqsMF)
idMR <- gsub("_MR2", "_MF2", fastqsMR)
idMF
source("R/config.R")
# Specify file name formats
fnsMF <- list.files(path_rawMF) # gets all files in the raw path
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)] # isolates only files ending in .gz
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
# load config file
source("R/config.R")
# Specify file name formats
fnsMF <- list.files(path_rawMF) # gets all files in the raw path
fastqsMF <- fnsMF[grepl('.gz$', fnsMF)] # isolates only files ending in .gz
##
fnsMR <- list.files(path_rawMR)
fastqsMR <- fnsMR[grepl('.gz$', fnsMR)]
##
fastqsMF
idMF <- gsub("_MR1", "_MF1", fastqsMF)
idMR <- gsub("_MR2", "_MF2", fastqsMR)
idMF
idMR
# FilterandTrim
filtM <- filterAndTrim(file.path(path_rawMF, fastqsMF), file.path(path_filtMF, idMF), file.path(path_rawMR, fastqsMR), file.path(path_filtMR, idMR), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
# Specify file name formats
fastqtest <- list.files(path_rawMF, pattern = "\\.fastq.gz$")
fastqtest
plotQualityProfile(path_filtMF, aggregate = TRUE)
plotQualityProfile(path_rawMF[4])
path_rawMF
plotQualityProfile(fastqsMF[4])
path_fast <- file.path(fastqsMF)
path_fast
# Specify file name formats
fastqsMF <- list.files(path_rawMF, pattern = "\\.fastq.gz$") # isolates only files ending in .gz
path_fast <- file.path(fastqsMF)
path_fast
path_fast <- file.path(path_rawMF, fastqsMF)
path_fast
plotQualityProfile(path_fast[4])
plotQualityProfile(path_fast, aggregate = TRUE)
plotQualityProfile(path_fast[5])
# MANUAL: Save outputs
saveRDS(filtM, "Data/Outputs/2025-06-17/12S/InterimObjects/FiltOutput.rds")
# create a list of files in the path
filtMF <- list.files(path_filtMF, pattern = "\\.fastq.gz$")
filtMF
filtMR <- list.files(path_filtMR, pattern = "\\.fastq.gz$")
derepMF <- derepFastq(filtMF, verbose=TRUE)
filtMF
# create a list of files in the path
filtMF <- list.files(path_filtMF, pattern = "\\.fastq.gz$")
derepMF <- derepFastq(filtMF, verbose=TRUE)
# create a list of files in the path
filtnames12Finter <- list.files(path_filtMF, full.names = TRUE)
# Specify I only want the files with the .gz extension
filtnames12F <- filtnames12Finter[grepl('.gz$', filtnames12Finter)]
derepMF <- derepFastq(filtnames12F, verbose=TRUE)
# create a list of files in the path
filtMF <- list.files(path_filtMF, pattern = "\\.fastq.gz$", full.names = TRUE)
derepMF <- derepFastq(filtMF, verbose=TRUE)
filtMR <- list.files(path_filtMR, pattern = "\\.fastq.gz$", full.names = TRUE)
derepMR <- derepFastq(filtMR, verbose=TRUE)
errMF <- learnErrors(derepMF, multithread = FALSE, randomize = TRUE)
errMR <- learnErrors(derepMR, multithread = FALSE, randomize = TRUE)
# MANUAL: Save object
saveRDS(errMF, "Data/Outputs/2025-06-17/12S/InterimObjects/Forward_Error.rds")
saveRDS(errMR, "Data/Outputs/2025-06-17/12S/InterimObjects/Reverse_Error.rds")
# Generate and save error plots
ggsave("Forward_ErrorPlot.png", path = path_figM, plotErrors(errMF, nominalQ = TRUE), width = 6, height = 4, units = "in")
ggsave("12Reverse_ErrorPlot.png", path = path_figM, plotErrors(errMR, nominalQ = TRUE), width = 6, height = 4, units = "in")
# This takes a long time. If you have to do it again, include this:
beep(sound = "fanfare")
# Infer sample composition
dadaMF <- dada(derepMF, err = errMF, multithread = FALSE)
dadaMR <- dada(derepMR, err = errMR, multithread = FALSE)
# Notification
beep(sound = "fanfare")
# Save all in case I need to reload the dada objects
saveRDS(dadaMF, "Data/Outputs/2025-06-17/12S/InterimObjects/Forward_SampleComp.rds")
saveRDS(dadaMR, "Data/Outputs/2025-06-17/12S/InterimObjects/Reverse_SampleComp.rds")
# Make sequence tables
mergeM <- mergePairs(dadaMF, path_filtMF, dadaMR, path_filtMR, verbose=TRUE)
# Turn into a sequence table
seqtabM <- makeSequenceTable(mergersM)
# Turn into a sequence table
seqtabM <- makeSequenceTable(mergeM)
# Remove chimeras
seqtabM_NC <- removeBimeraDenovo(seqtabM, method = "consensus", multithread = FALSE, verbose = TRUE)
# save both steps
saveRDS(seqtabM, "Data/Outputs/2025-06-17/12S/InterimObjects/MergedSampleComp.rds")
saveRDS(seqtabM_NC, "Data/Outputs/2025-06-17/12S/InterimObjects/MergedSeqTab_NoChim.rds")
dim(filtM)
colnames(filtM)
# Workflow Verification
# Set function
getN <- function(x) sum(getUniques(x))
# Combine read numbers
track12 <- cbind(filtM$reads.in, filtM$reads.out, sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
filtM[1]
filttrack <- as.data.frame(filtM)
View(filttrack)
# Combine read numbers
track12 <- cbind(filttrack$reads.in, filttrack$reads.out, sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
View(track12)
filttrack$Sample <- row.names(filttrack)
# Combine read numbers
track12 <- cbind(sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
View(track12)
track12$Sample <- row.names(track12)
# Combine read numbers
track12 <- cbind(sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
track12 <- as.data.frame(track12)
track12$Sample <- row.names(track12)
track12$Sample <- gsub("_MF1.fastq.gz", "", track12$Sample)
filttrack$Sample <- gsub("_MR1.fastq.gz", "", filttrack$Sample)
row.names(filttrack) <- NULL
filttrack %>% select(Sample, everything())
track12 %>% select(Sample, everything())
filttrack <- as.data.frame(filtM)
filttrack$Sample <- row.names(filttrack)
row.names(filttrack) <- NULL
filttrack$Sample <- gsub("_MR1.fastq.gz", "", filttrack$Sample)
filttrack %>% select(Sample, everything())
track12 <- as.data.frame(track12)
track12$Sample <- row.names(track12)
row.names(track12) <- NULL
track12$Sample <- gsub("_MF1.fastq.gz", "", track12$Sample)
track12 %>% select(Sample, everything())
filttrack %>% select(Sample, everything())
track12 %>% select(Sample, everything())
View(track12)
# Combine read numbers
track12 <- cbind(sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
# Set column names
colnames(track12) <- c("denoisedF", "denoisedR", "merged", "nonchim")
View(track12)
filttrack <- as.data.frame(filtM)
filttrack$Sample <- row.names(filttrack)
row.names(filttrack) <- NULL
filttrack$Sample <- gsub("_MR1.fastq.gz", "", filttrack$Sample)
filttrack <- filttrack %>% select(Sample, everything())
track12 <- as.data.frame(track12)
track12$Sample <- row.names(track12)
row.names(track12) <- NULL
track12$Sample <- gsub("_MF1.fastq.gz", "", track12$Sample)
track12 <- track12 %>% select(Sample, everything())
View(track12)
merge(filttrack, track12, by = "Sample")
setdiff(filttrack, track12)
setdiff(filttrack$Sample, track12$Sample)
WVM <- merge(filttrack, track12, by = "Sample")
View(WVM)
WVMplot <- ggplot(as.data.frame(WVM)) +
geom_point(aes(row.names(WVM), reads.in), color = "gold", size = 2.5) +
geom_point(aes(row.names(WVM), reads.out), color = "yellowgreen") +
geom_point(aes(row.names(WVM), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(WVM), denoisedR), color = "blue") +
geom_point(aes(row.names(WVM), merged), color = "darkblue") +
geom_point(aes(row.names(WVM), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_blank()) +
ggtitle("Workflow Progression for AMC 12S Reads") + labs(x = "Sample", y = "Number of Reads")
WVMplot
getN <- function(x) sum(getUniques(x))
# Combine read numbers
track12 <- cbind(sapply(dadaMF, getN), sapply(dadaMR, getN), sapply(mergeM, getN), rowSums(seqtabM_NC))
# Set column names
colnames(track12) <- c("denoisedF", "denoisedR", "merged", "nonchim")
filttrack <- as.data.frame(filtM)
filttrack$Sample <- row.names(filttrack)
row.names(filttrack) <- NULL
filttrack$Sample <- gsub("_MR1.fastq.gz", "", filttrack$Sample)
filttrack <- filttrack %>% select(Sample, everything())
track12 <- as.data.frame(track12)
track12$Sample <- row.names(track12)
row.names(track12) <- NULL
track12$Sample <- gsub("_MF1.fastq.gz", "", track12$Sample)
track12 <- track12 %>% select(Sample, everything())
WVM <- merge(filttrack, track12, by = "Sample")
# Plot filter trends
WVMplot <- ggplot(as.data.frame(WVM)) +
geom_point(aes(row.names(WVM), reads.in), color = "gold", size = 2.5) +
geom_point(aes(row.names(WVM), reads.out), color = "yellowgreen") +
geom_point(aes(row.names(WVM), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(WVM), denoisedR), color = "blue") +
geom_point(aes(row.names(WVM), merged), color = "darkblue") +
geom_point(aes(row.names(WVM), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_blank()) +
ggtitle("Workflow Progression for AMC 12S Reads") + labs(x = "Sample", y = "Number of Reads")
# Save plot
ggsave("WVM_plot.png", plot = WVMplot, path = path_figM, width = 6, height = 4, units = "in")
# Save the results of the workflow verification
write.csv(WVM, file.path(path_outM, "WorkflowVerification.csv"))
# Assign taxonomy
all.taxa <- assignTaxonomy(seqtabM_NC, 'Data/Input/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
# Assign taxonomy
all.taxa <- assignTaxonomy(seqtabM_NC, 'Data/Input/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
## Correct the staggered column names
names(all.taxa) <- c("X", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Save output
write.csv(all.taxa, file.path(path_outM, "12SAssignedTaxa.csv"))
beep(sound = "fanfare")
head(all.taxa)
View(all.taxa)
## Correct the staggered column names
names(all.taxa) <- c("X", "Phylum", "Class", "Order", "Family", "Genus", "Species")
## Correct the staggered column names
colnames(all.taxa) <- c("X", "Phylum", "Class", "Order", "Family", "Genus", "Species")
View(all.taxa)
## Correct the staggered column names
colnames(all.taxa) <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
# Save output
write.csv(all.taxa, file.path(path_outM, "12SAssignedTaxa.csv"))
# Update the all.taxa row names to be the actual sequences
all.taxa <- data.frame(all.taxa, row.names = 1)
# Update the all.taxa row names to be the actual sequences
all.taxa <- as.data.frame(all.taxa, row.names = 1)
View(all.taxa)
View(all.taxa)
library(readr)
X12SAssignedTaxa <- read_csv("Data/Outputs/2025-06-17/12S/InterimObjects/12SAssignedTaxa.csv")
View(X12SAssignedTaxa)
# Assign taxonomy
all.taxa <- assignTaxonomy(seqtabM_NC, 'Data/Input/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
View(all.taxa)
source("C:/Users/bydav/Desktop/GitHub/AMC_2022-23/R/01_DADA2.R")
source("C:/Users/bydav/Desktop/GitHub/AMC_2022-23/R/01_DADA2.R")
View(WVB)
View(seqtabB_NC)
FtrackM <- as.data.frame(filtM)
FtrackM$Sample <- row.names(FtrackM)
row.names(FtrackM) <- NULL
FtrackM$Sample <- gsub("_MR1.fastq.gz", "", FtrackM$Sample)
FtrackM <- FtrackM %>% select(Sample, everything())
trackM <- as.data.frame(trackM)
trackM$Sample <- row.names(trackM)
row.names(trackM) <- NULL
trackM$Sample <- gsub("_MF1.fastq.gz", "", trackM$Sample)
trackM <- trackM %>% select(Sample, everything())
FtrackB <- as.data.frame(filtB)
FtrackB$Sample <- row.names(FtrackB)
row.names(FtrackB) <- NULL
FtrackB$Sample <- gsub("_MR1.fastq.gz", "", FtrackB$Sample)
FtrackB <- FtrackB %>% select(Sample, everything())
trackB <- as.data.frame(trackB)
trackB$Sample <- row.names(trackB)
row.names(trackB) <- NULL
trackB$Sample <- gsub("_MF1.fastq.gz", "", trackB$Sample)
trackB <- trackB %>% select(Sample, everything())
##
WVB <- merge(FtrackB, trackB, by = "Sample")
FtrackB
trackB
trackB <- as.data.frame(trackB)
trackB$Sample <- row.names(trackB)
row.names(trackB) <- NULL
trackB$Sample <- gsub("_BR1.fastq.gz", "", trackB$Sample)
trackB <- trackB %>% select(Sample, everything())
##
WVB <- merge(FtrackB, trackB, by = "Sample")
FtrackB
trackB
trackB <- as.data.frame(trackB)
trackB
FtrackB <- as.data.frame(filtB)
FtrackB$Sample <- row.names(FtrackB)
row.names(FtrackB) <- NULL
FtrackB$Sample <- gsub("_BR1.fastq.gz", "", FtrackB$Sample)
FtrackB <- FtrackB %>% select(Sample, everything())
FtrackB
##
trackB <- cbind(sapply(dadaBF, getN), sapply(dadaBR, getN), sapply(mergeB, getN), rowSums(seqtabB_NC))
trackB
##
colnames(trackB) <- c("denoisedF", "denoisedR", "merged", "nonchim")
trackB
trackB <- as.data.frame(trackB)
trackB$Sample <- row.names(trackB)
trackB
row.names(trackB) <- NULL
trackB$Sample <- gsub("_BR1.fastq.gz", "", trackB$Sample)
trackB <- trackB %>% select(Sample, everything())
trackB
FtrackB
trackB$Sample <- gsub("_BF1.fastq.gz", "", trackB$Sample)
trackB <- trackB %>% select(Sample, everything())
trackB
##
WVB <- merge(FtrackB, trackB, by = "Sample")
WVBplot <- ggplot(as.data.frame(WVB)) +
geom_point(aes(row.names(WVB), reads.in), color = "gold", size = 2.5) +
geom_point(aes(row.names(WVB), reads.out), color = "yellowgreen") +
geom_point(aes(row.names(WVB), denoisedF), color = "darkgreen") +
geom_point(aes(row.names(WVB), denoisedR), color = "blue") +
geom_point(aes(row.names(WVB), merged), color = "darkblue") +
geom_point(aes(row.names(WVB), nonchim), color = "purple", size = 2.5) +
theme_bw() +
theme(axis.text.x = element_blank()) +
ggtitle("Workflow Progression for AMC COI Reads") + labs(x = "Sample", y = "Number of Reads")
# Save plots and df results
ggsave("WVM_plot.png", plot = WVMplot, path = path_figM, width = 6, height = 4, units = "in")
write.csv(WVM, file.path(path_outM, "WorkflowVerification.csv"))
##
ggsave("WVB_plot.png", plot = WVBplot, path = path_figB, width = 6, height = 4, units = "in")
write.csv(WVB, file.path(path_outB, "WorkflowVerification.csv"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("../"))
source("R/02_config.R")
all.taxa <- assignTaxonomy(seqtabM_NC, 'Data/Input/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
beep(sound = "fanfare") # notify when done
head(all.taxa)
# To correct the column names:
colnames(all.taxa) <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
View(all.taxa)
# Save all.taxa as a .csv once itʻs in order
write.csv(all.taxa, file.path(path_outM, "12SAssignedTaxa.csv"))
head(seqtabM_NC) # take a look at the structure
View(seqtabM_NC)
seqtabM_NC <- seqtabM_NC[order(row.names(seqtabM_NC)), ]
head(meta) # take a look at how meta read in
# Set the sample column as row.names
meta <- data.frame(meta, row.names = 1)
# Order the meta file by row.names
meta <- meta[order(row.names(meta)), ]
head(meta) # take a look at how meta read in
# Check which samples are in meta but not in seqtabM_NC
setdiff(row.names(seqtabM_NC), row.names(meta))
# Check which samples are in meta but not in seqtabM_NC
setdiff(row.names(meta), row.names(seqtabM_NC))
row.names(seqtabM_NC) <- gsub("_MF1.fastq.gz", "", row.names(seqtabM_NC))
# Check which samples are in meta but not in seqtabM_NC
setdiff(row.names(meta), row.names(seqtabM_NC))
# Set the sample column as row.names
metacheck <- data.frame(meta, row.names = 1)
### Set the location of the metadata file
meta <- read.csv("Data/Input/AMCMeta.csv", header = TRUE)
# Set the sample column as row.names
metacheck <- data.frame(meta, row.names = 1)
# Check which samples are in meta but not in seqtabM_NC
setdiff(row.names(metacheck), row.names(seqtabM_NC))
# Check which samples are in meta but not in seqtabM_NC
setdiff(meta$sample, row.names(seqtabM_NC))
# Remove these samples
meta <- subset(meta, sample != "AMC23_C721")
# Check which samples are in meta but not in seqtabM_NC
setdiff(meta$sample, row.names(seqtabM_NC))
# Set the sample column as row.names
meta <- data.frame(meta, row.names = 1)
# Order the meta file by row.names
meta <- meta[order(row.names(meta)), ]
View(meta)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabM_NC, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
EX_ps
# SAVE
saveRDS(phy_ini, "Data/Outputs/2025-06-17/12S/InterimObjects/InitialPhyloseq.rds")
# Create phyloseq object with all samples
phy_ini <- phyloseq(otu_table(seqtabM_NC, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
# SAVE
saveRDS(phy_ini, "Data/Outputs/2025-06-17/12S/InterimObjects/InitialPhyloseq.rds")
