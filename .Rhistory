library(vegan)
library(dplyr)
taxabund0 <- abundance_heatmap(EX_ps_clean.rar, classification = 'Family', treatment = c('Treatment'), subset = 'Pre')
install.packages("remotes")
remotes::install_github("schuyler-smith/phyloschuyler")
library(phylosmith)
taxa_abundance_bars(
taxa_filter(EX_ps_clean.rar, frequency = 0.8),
classification = 'Phylum', treatment = c('Treatment'),
subset = c('Pre', 'Post'), transformation = 'none')
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
proportionstreat <- taxa_proportions(EX_ps_clean.rar, 'Phylum', treatment = c('Treatment'))
# Top 50 by abundance only
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Family")
physeqlow = prune_taxa(taxa_names(EX_ps_clean.rar)[60:110], EX_ps_clean.rar)
physeqlowbars = transform_sample_counts(physeqlow, function(x) x / sum(x) )
plot_bar(physeqlowbars, fill="Family")
test <- subset_samples(EX_ps_clean.rar, TreatType == "Pre")
test
EX_12prelim_post <- subset_samples(EX_ps_clean.rar, TreatType == "Post")
EX_12prelim_pre <- subset_samples(EX_ps_clean.rar, TreatType == "Pre")
EX_12prelim_post
EX_12prelim_pre.stacked = transform_sample_counts(EX_12prelim_pre, function(x) x / sum(x) )
plot_bar(EX_12prelim_pre.stacked, fill="Family")
??plot_bar
plot_bar(EX_ps_clean.rar, fill = "Genus")
plot_bar(EX_ps_clean.rar, x="TreatType", fill="Genus")
plot_bar(EX_ps_clean.rar.stacked, x="TreatType", fill="Genus")
plot_bar(physeqhighbars, x="TreatType", fill="Genus")
plot_bar(physeqhighbars, x="TreatType", fill="Family")
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType)
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom")
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") #+ theme(axis.title.x = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
subset_samples(EX_ps_clean.rar, TreatType != "")
prelimLWA <- subset_samples(EX_ps_clean.rar, TreatType != "")
plot_bar(prelimLWA, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(prelimLWA, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(prelimLWA, "Family", fill="Order", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:50], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:15], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:50], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
# Stacked plots (species proportions)
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:20], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
# Facet grid (abundance)
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
# Stacked plots (species proportions)
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
# Facet grid (abundance)
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
prelimLWA
lowprelimLWA <- prune_taxa(taxa_names(prelimLWA)[90:110], prelimLWA)
lowprelimLWAbars = transform_sample_counts(lowprelimLWA, function(x) x / sum(x) )
# Facet grid (abundance)
plot_bar(lowprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar.stacked, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(physeqhigh, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
physeqmid = prune_taxa(taxa_names(EX_ps_clean.rar)[1:20], EX_ps_clean.rar)
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(physeqmid, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
list(EX_ps_clean.rar, TreatType != "")
EX_ps_clean.rar
EX_ps_clean.rar(sample_data)
EX_ps_clean.rar(sample_data())
View(EX_ps_clean.rar)
plot_bar(physeqmid, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(EX_ps_clean.rar, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
sam_table(EX_ps_clean.rar)[, "Treatment"]
sam_data(EX_ps_clean.rar)[, "Treatment"]
# Identify packages to use
packages = list(
CRAN = c("rlang", "taxizedb", "rentrez", "AnnotationBustR", "ape", "ggplot2",
"argparser", "BiocManager", "remotes", "yaml", "dplyr", "readr", "tidyr"),
bioc = c("Biostrings", "genbankr"),
github = c()
)
packages$github
packages = list(
CRAN = c("ggplot2", "vegan", "beepr"),
bioc = c("BiocManager", "dada2", "phyloseq"),
github = c()
)
source(AMC12S_config.R)
source("AMC12S_config.R")
??ggsave
ggplot(mtcars, aes(mpg, wt)) +geom_point()
ggsave(path_outputs, file = "testsave.png")
test <- ggplot(mtcars, aes(mpg, wt)) +geom_point()
ggsave(path_outputs, file = "testsave.png", plot = test)
rlang::last_trace()
ggsave("testsave.png", path = path_outputs, plot = test)
source("AMC12S_config.R")
ggsave("testsave.png", path = path_outputs, plot = test)
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
# how to save with the config setup: ggsave("testsave.png", path = path_outputs, plot = test)
# 12S Forward:
plotQualityProfile(fns12Fisolate[75])
fns12Fisolate[75]
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
fns12Fisolate[75]
fns12Fisolate[74]
fns12Fisolate
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
fns12Fisolate[75]
# how to save with the config setup: ggsave("testsave.png", path = path_outputs, plot = test)
# 12S Forward:
plotQualityProfile(fns12Fisolate[75])
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 400, height = 600, units = "px")
ggsave("12ForwardQuality_RNG752.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 400, height = 600, units = "px")
ggsave("12ForwardQuality_RNG753.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG15.png", plot = plotQualityProfile(fns12Fisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
# 12S Forward:
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
# 12S Forward:
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG15.png", plot = plotQualityProfile(fns12Fisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG63.png", plot = plotQualityProfile(fns12Fisolate[63]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG34.png", plot = plotQualityProfile(fns12Fisolate[34]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG35.png", plot = plotQualityProfile(fns12Fisolate[35]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG28.png", plot = plotQualityProfile(fns12Fisolate[28]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
# 12S Reverse:
ggsave("12ReverseQuality_RNG70.png", plot = plotQualityProfile(fns12Risolate[70]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG40.png", plot = plotQualityProfile(fns12Risolate[40]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG69.png", plot = plotQualityProfile(fns12Risolate[69]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG38.png", plot = plotQualityProfile(fns12Risolate[38]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG5.png", plot = plotQualityProfile(fns12Risolate[5]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG10.png", plot = plotQualityProfile(fns12Risolate[10]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
??saveRDS
# Set up output folder and version
version <- c("1")
class(version)
# Set up output folder and version
version <- 1
class(version)
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs"
class(base_outputs)
# Set up output folder and version
version <- c("1")
# Set up output folder and version
versiondate <- c("3-May02-2024")
output_version <- paste(base_outputs, versiondate, sep = /)
output_version <- paste(base_outputs, versiondate, sep = "/")
output_version
#define directory
my_directory <- file.path(base_outputs, output_version)
my_directory
#define directory
my_directory <- file.path(base_outputs, versiondate)
my_directory
#create directory if it doesn't exist
if (!dir.exists(my_directory)) {dir.create(my_directory)}
dir.exists(my_directory)
#create directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(my_directory)
# Set up output folder and version
versiondate <- c("3-May02-2024/")
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs"
output_version <- paste(base_outputs, versiondate, sep = "/")
output_version
#define directory
my_directory <- file.path(base_outputs, versiondate)
dir.exists(my_directory)
#create directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(my_directory)
output_version
#define directory
my_directory <- file.path(base_outputs, versiondate)
dir.exists(my_directory)
#create directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(my_directory)
#create directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(my_directory)
#create directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(my_directory, showWarnings = FALSE)
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME
versiondate <- c("3-May02-2024/")
# base output folder
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs"
# Combine strings to make a new path
output_version <- paste(base_outputs, versiondate, sep = "/")
output_version
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME
versiondate <- c("3-May02-2024/")
# base output folder
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs"
# Combine strings to make a new path
output_version <- paste(base_outputs, versiondate, sep = "/")
# Create version output directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(output_version, showWarnings = FALSE)
# Set version output as the output path for items from this run
path_outputs <- output_version
path-outputs
path_outputs
# Set primer
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME
versiondate <- c("3-May02-2024/")
# Set primer
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME
versiondate <- c("3-May02-2024/")
# base output folder
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S"
# Combine strings to make a new path
output_version <- paste(base_outputs, versiondate, sep = "/")
# Create version output directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(output_version, showWarnings = FALSE)
# Set version output as the output path for items from this run
path_outputs <- output_version
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fns12F
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fastqs12F
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
fastqs12R
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
names12R
filt12F <- file.path(path_filt12F, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
class(sample.names)
sample.names
names12R
class(names12R)
plotQualityProfile((fns12Fisolate[42]))
filtFs
??sample.names
paste0(names12F, "_F_filt.fastq.gz")
filt12F <- file.path(path_filt12F, "filtered", paste0(names12F, "_F_filt.fastq.gz"))
filt12F
base_filt12F <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Forward"
base_filt12R <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Reverse"
filtF_version <- paste(base_filt12F, versiondate, sep = "/")
filtR_version <- paste(base_filt12R, versiondate, sep = "/")
dir.create(filtF_version, showWarnings = FALSE)
dir.create(filtR_version, showWarnings = FALSE)
path_filt12F <- filtF_version
path_filt12R <- filtR_version
# Set primer
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME
versiondate <- c("5-May02-2024/")
base_filt12F <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Forward"
base_filt12R <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Reverse"
filtF_version <- paste(base_filt12F, versiondate, sep = "/")
filtR_version <- paste(base_filt12R, versiondate, sep = "/")
dir.create(filtF_version, showWarnings = FALSE)
dir.create(filtR_version, showWarnings = FALSE)
path_filt12F <- filtF_version
path_filt12R <- filtR_version
filtout12F <- filterAndTrim(file.path(path_raw12F, fastqs12F), file.path(path_filt12F, paste0(names12F, "filt.fastq.gz")), trimLeft = 21, truncLen = 220, maxEE = 2, maxN = 0, verbose = TRUE)
filtout12R <- filterAndTrim(file.path(path_raw12R, fastqs12R), file.path(path_filt12R, paste0(names12R, "filt.fastq.gz")), trimLeft = 27, truncLen = 220, maxEE = 2, maxN = 0, verbose = TRUE)
filtout12sync <- filterAndTrim(file.path(path_raw12F, fastqs12F), file.path(path_filt12F, paste0(names12F, "filt.fastq.gz")), file.path(path_raw12R, fastqs12R), file.path(path_filt12R, paste0(names12R, "filt.fastq.gz")), trimLeft = c(21,27), truncLen=c(220,220), maxN=0, maxEE=c(2,2), verbose=TRUE)
beep(sound = "fanfare")
filtout12Fsync
dim(filtout12sync)
# Order by filtered read amount
filtout12sync[order(filtout12sync[,2], decreasing=FALSE),]
# Compare total raw in and filtered out read amounts
colSums(filtout12sync)
filtout12sync
dim(filtout12sync)
colnames(filtout12sync)
??filterAndTrim
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtoutBR), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Reverse Reads")
filttrend12sync
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Reverse Reads")
filttrend12sync
filttrend12F <- ggplot(as.data.frame(filtout12F)) + geom_point(aes(row.names(filtout12F), reads.in), color = "blue") + geom_point(aes(row.names(filtout12F), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12S Forward Reads")
filttrend12F
filttrend12R <- ggplot(as.data.frame(filtout12R)) + geom_point(aes(row.names(filtout12R), reads.in), color = "blue") + geom_point(aes(row.names(filtout12R), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12S Reverse Reads")
filttrend12R
ggsave("FilterTrends_12Sync.png", plot = filttrend12sync, path = path_outputs, width = 6, height = 4, units = "in")
versiondate <- c("5-May02-2024/")
# base output folder
base_outputs <- "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S"
# Combine strings to make a new path
output_version <- paste(base_outputs, versiondate, sep = "/")
# Create version output directory if it doesn't exist - if it does exist, it'll just throw a warning
dir.create(output_version, showWarnings = FALSE)
# Set version output as the output path for items from this run
path_outputs <- output_version
ggsave("FilterTrends_12Sync.png", plot = filttrend12sync, path = path_outputs, width = 6, height = 4, units = "in")
ggsave("FilterTrends_12F.png", plot = filttrend12F, path = path_outputs, width = 6, height = 4, units = "in")
ggsave("FilterTrends_12R.png", plot = filttrend12R, path = path_outputs, width = 6, height = 4, units = "in")
plotQualityProfile("C:/Users/bydav/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Raw/12S/Read2/AMC22_MB01_MR2.fastq.gz")
#Compare post and pre-filter and trim
plotQualityProfile("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Raw/12S/Read1/AMC22_MB01_MR1.fastq.gz")
plotQualityProfile("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Forward/5-May02-2024/AMC22_MB01_MR1filt.fastq.gz")
plotQualityProfile("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Raw/12S/Read2/AMC22_MB01_MR2.fastq.gz")
plotQualityProfile("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/Filtered/12S Reverse/5-May02-2024/AMC22_MB01_MR2filt.fastq.gz")
# create a list of files in the path
filtnames12Finter <- list.files(path_filt12F, full.names = TRUE)
filtnames12Finter
set.seed(9450)
# Set the names for the filtered files we'll be using
# create a list of files in the path
filtnames12Finter <- list.files(path_filt12F, full.names = TRUE)
# Specify I only want the files with the .gz extension
filtnames12F <- filtnames12Finter[grepl('.gz$', filtnames12Finter)]
# Extract just the file name, not the path, and remove the .gz extension. This leaves on the .fastq extension
fastqfilt12F <- tools::file_path_sans_ext(basename(filtnames12F))
# Remove the .fastq extension
names12Ffilt <- tools::file_path_sans_ext(basename(fastqfilt12F))
# 12Reverse
filtnames12Rinter <- list.files(path_filt12R, full.names = TRUE)
filtnames12R <- filtnames12Rinter[grepl('.gz$', filtnames12Rinter)]
fastqfilt12R <- tools::file_path_sans_ext(basename(filtnames12R))
names12Rfilt <- tools::file_path_sans_ext(basename(fastqfilt12R))
names12Ffilt
names12Rfilt
filtnames12F
derep12F <- derepFastq(filtnames12F, verbose=TRUE)
derep12R <- derepFastq(filtnames12R, verbose=TRUE)
path_outputs
err12F <- learnErrors(derep12F, multithread = FALSE, randomize = TRUE)
saveRDS(err12F, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Forward_Error.rds")
ggsave("12Forward_ErrorPlot.png", path = path_outputs, plotErrors(err12F, nominalQ = TRUE), width = 6, height = 4, units = "in")
err12R <- learnErrors(derep12R, multithread = FALSE, randomize = TRUE)
saveRDS(err12R, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Reverse_Error.rds")
ggsave("12Reverse_ErrorPlot.png", path = path_outputs, plotErrors(err12R, nominalQ = TRUE), width = 6, height = 4, units = "in")
# This takes a long time. If you have to do it again, include this:
beep(sound = "fanfare")
dada12F <- dada(derep12F, err = err12F, multithread = FALSE)
print("dada 12F finished")
beep(sound = "coin")
dada12R <- dada(derep12R, err = err12R, multithread = FALSE)
print("dada 12R finished")
beep(sound = "fanfare")
# Save all in case I need to reload the dada objects
saveRDS(dada12F, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Forward_SampleComp.rds")
saveRDS(dada12R, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Reverse_SampleComp.rds")
mergers12 <- mergePairs(dada12F, path_filt12F, dada12R, path_filt12R, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers12[[1]])
saveRDS(mergers12, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12MergedSampleComp.rds")
seqtab12.nochim <- removeBimeraDenovo(mergers12, method = "consensus", multithread = FALSE, verbose = TRUE)
dim(seqtab12.nochim)
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
beep(sound = "coin")
dim(seqtab12.nochim)
table(nchar(getSequences(seqtab12.nochim)))
seqtab12.nochim
class(seqtab12.nochim)
dim(seqtab12.nochim)
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
dim(mergers12)
class(mergers12)
mergers12
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
track12
seqtab12.nochim[1]
source("AMCCOI_config.R")
# Specify file name formats
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsBFisolate <- file.path(path_rawBF, fastqsBF)
fnsBRisolate <- file.path(path_rawBR, fastqsBR)
# Set sample names to a vector
# Remove path and the .gz extension
# Repeat file_path_sans_ext to also remove the .fastq
namesBFfast <- tools::file_path_sans_ext(basename(fastqsBF))
namesBF <- tools::file_path_sans_ext(namesBFfast)
namesBRfast <- tools::file_path_sans_ext(basename(fastqsBR))
# Repeat file_path_sans_ext to also remove the .fastq
namesBR <- tools::file_path_sans_ext(namesBRfast)
namesBR
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG20.png", plot = plotQualityProfile(fnsBFisolate[20]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG57.png", plot = plotQualityProfile(fnsBFisolate[57]), path = path_outputs, width = 6, height = 4, units = "in")
path_outputs
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
# B Forward:
#ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
plotQualityProfile(fnsBFisolate[64])
fnsBFisolate
fnsBFisolate[64]
plotQualityProfile(fnsBFisolate[64])
source("AMCCOI_config.R")
# Specify file name formats
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsBFisolate <- file.path(path_rawBF, fastqsBF)
fnsBRisolate <- file.path(path_rawBR, fastqsBR)
# Set sample names to a vector
# Remove path and the .gz extension
# Repeat file_path_sans_ext to also remove the .fastq
namesBFfast <- tools::file_path_sans_ext(basename(fastqsBF))
namesBF <- tools::file_path_sans_ext(namesBFfast)
namesBRfast <- tools::file_path_sans_ext(basename(fastqsBR))
# Repeat file_path_sans_ext to also remove the .fastq
namesBR <- tools::file_path_sans_ext(namesBRfast)
namesBF
fnsBFisolate
fnsBFisolate[64]
plotQualityProfile(fnsBFisolate[64])
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
# B Forward:
#ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG20.png", plot = plotQualityProfile(fnsBFisolate[20]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG57.png", plot = plotQualityProfile(fnsBFisolate[57]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG15.png", plot = plotQualityProfile(fnsBFisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG11.png", plot = plotQualityProfile(fnsBFisolate[11]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
# B Reverse:
ggsave("BR2ReverseQuality_RNG15.png", plot = plotQualityProfile(fnsBRisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG49.png", plot = plotQualityProfile(fnsBRisolate[49]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG56.png", plot = plotQualityProfile(fnsBRisolate[56]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG77.png", plot = plotQualityProfile(fnsBRisolate[77]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG11.png", plot = plotQualityProfile(fnsBRisolate[11]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG28.png", plot = plotQualityProfile(fnsBRisolate[28]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
??filterAndTrim
??plotQualityProfile
plotQualityProfile(fnsBFisolate, aggregate = TRUE)
