seqtab12.nochim
class(seqtab12.nochim)
dim(seqtab12.nochim)
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
dim(mergers12)
class(mergers12)
mergers12
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
track12
seqtab12.nochim[1]
source("AMCCOI_config.R")
# Specify file name formats
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsBFisolate <- file.path(path_rawBF, fastqsBF)
fnsBRisolate <- file.path(path_rawBR, fastqsBR)
# Set sample names to a vector
# Remove path and the .gz extension
# Repeat file_path_sans_ext to also remove the .fastq
namesBFfast <- tools::file_path_sans_ext(basename(fastqsBF))
namesBF <- tools::file_path_sans_ext(namesBFfast)
namesBRfast <- tools::file_path_sans_ext(basename(fastqsBR))
# Repeat file_path_sans_ext to also remove the .fastq
namesBR <- tools::file_path_sans_ext(namesBRfast)
namesBR
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG20.png", plot = plotQualityProfile(fnsBFisolate[20]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("C:/Users/bydav/Desktop/MathFilterTestAMC/BF2ForwardQuality_RNG57.png", plot = plotQualityProfile(fnsBFisolate[57]), path = path_outputs, width = 6, height = 4, units = "in")
path_outputs
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
# B Forward:
#ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
plotQualityProfile(fnsBFisolate[64])
fnsBFisolate
fnsBFisolate[64]
plotQualityProfile(fnsBFisolate[64])
source("AMCCOI_config.R")
# Specify file name formats
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsBFisolate <- file.path(path_rawBF, fastqsBF)
fnsBRisolate <- file.path(path_rawBR, fastqsBR)
# Set sample names to a vector
# Remove path and the .gz extension
# Repeat file_path_sans_ext to also remove the .fastq
namesBFfast <- tools::file_path_sans_ext(basename(fastqsBF))
namesBF <- tools::file_path_sans_ext(namesBFfast)
namesBRfast <- tools::file_path_sans_ext(basename(fastqsBR))
# Repeat file_path_sans_ext to also remove the .fastq
namesBR <- tools::file_path_sans_ext(namesBRfast)
namesBF
fnsBFisolate
fnsBFisolate[64]
plotQualityProfile(fnsBFisolate[64])
# B Forward:
ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
# B Forward:
#ggsave("BF2ForwardQuality_RNG48.png", path = path_outputs, plot = plotQualityProfile(fnsBFisolate[48]), width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG64.png", plot = plotQualityProfile(fnsBFisolate[64]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG20.png", plot = plotQualityProfile(fnsBFisolate[20]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG57.png", plot = plotQualityProfile(fnsBFisolate[57]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG15.png", plot = plotQualityProfile(fnsBFisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BF2ForwardQuality_RNG11.png", plot = plotQualityProfile(fnsBFisolate[11]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
# B Reverse:
ggsave("BR2ReverseQuality_RNG15.png", plot = plotQualityProfile(fnsBRisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG49.png", plot = plotQualityProfile(fnsBRisolate[49]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG56.png", plot = plotQualityProfile(fnsBRisolate[56]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG77.png", plot = plotQualityProfile(fnsBRisolate[77]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG11.png", plot = plotQualityProfile(fnsBRisolate[11]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("BR2ReverseQuality_RNG28.png", plot = plotQualityProfile(fnsBRisolate[28]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
??filterAndTrim
??plotQualityProfile
plotQualityProfile(fnsBFisolate, aggregate = TRUE)
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12Merged Sequence No Chimera Table.rds")
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
View(seqtab12.nochim)
getN <- function(x) sum(getUniques(x))
source("AMC12S_config.R")
path_outputs
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
# Very slow and intensive
all.taxa <- assignTaxonomy(seqtab12.nochim, 'C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
class(seqtab.nochim)
class(seqtab12.nochim)
oldseqtab.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/2-March22-2024/12Merged Sequence No Chimera Table.rds")
class(oldseqtab.nochim)
View(oldseqtab.nochim)
seqtab <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12MergedSampleComp.rds")
class(seqtab)
mergers12 <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12MergedSampleComp.rds")
seqtabnochimtest <- makeSequenceTable(list(mergers12))
View(mergers12)
seqtabnochimtest <- makeSequenceTable(mergers12)
class(seqtabnochimtest)
seqtab12.nochim <- removeBimeraDenovo(seqtabnochimtest, method = "consensus", multithread = FALSE, verbose = TRUE)
class(seqtab12.nochim)
# Very slow and intensive
all.taxa <- assignTaxonomy(seqtab12.nochim, 'C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
View(all.taxa)
saveRDS(mergers12, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12MergedSampleComp.rds")
# Save output
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Merged Sequence No Chimera Table.rds")
write.csv(all.taxa, file.path(path_outputs), '12SAMC_AssignedTaxa.csv')
write.csv(all.taxa, file.path = path_outputs, '12SAMC_AssignedTaxa.csv')
write.csv(all.taxa, file.path(path_outputs, "12SAMC_AssignedTaxa.csv"), row.names = FALSE)
View(seqtab12.nochim)
dada12F <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Forward_SampleComp.rds")
dada12R <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/5-May02-2024/12Reverse_SampleComp.rds")
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
filt12F <- file.path(path_filt12F, "filtered", paste0(names12F, "_F_filt.fastq.gz"))
filt12R <- file.path(path_filt12R, "filtered", paste0(names12R, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
sample.names
names(filt12F) <- sample.names
filtout12sync <- filterAndTrim(file.path(path_raw12F, fastqs12F), file.path(path_filt12F, paste0(names12F, "filt.fastq.gz")), file.path(path_raw12R, fastqs12R), file.path(path_filt12R, paste0(names12R, "filt.fastq.gz")), trimLeft = c(21,27), truncLen=c(220,220), maxN=0, maxEE=c(2,2), verbose=TRUE)
beep(sound = "fanfare")
dim(filtout12sync)
# Order by filtered read amount
filtout12sync[order(filtout12sync[,2], decreasing=FALSE),]
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
colnames(track12) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
#rownames(track) <- sample.names
head(track12)
View(track12)
# Save the results of the workflow verification
write.csv(track12, file.path(path_outputs, "12S_WorkflowVerification.csv"))
View(track12)
View(filtout12sync)
GNRMaineSpecies_May2024 <- readRDS("C:/Users/bydav/Desktop/SpeciesListCleaning_Complete/outputs/GNRMaineSpecies_May2024.RDS")
View(GNRMaineSpecies_May2024)
source("AMCCOI_config.R")
# Specify file name formats
fnsBF <- list.files(path_rawBF)
fastqsBF <- fnsBF[grepl('.gz$', fnsBF)]
fnsBR <- list.files(path_rawBR)
fastqsBR <- fnsBR[grepl('.gz$', fnsBR)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fnsBFisolate <- file.path(path_rawBF, fastqsBF)
fnsBRisolate <- file.path(path_rawBR, fastqsBR)
# Set sample names to a vector
# Remove path and the .gz extension
# Repeat file_path_sans_ext to also remove the .fastq
namesBFfast <- tools::file_path_sans_ext(basename(fastqsBF))
namesBF <- tools::file_path_sans_ext(namesBFfast)
namesBRfast <- tools::file_path_sans_ext(basename(fastqsBR))
# Repeat file_path_sans_ext to also remove the .fastq
namesBR <- tools::file_path_sans_ext(namesBRfast)
filtF <- file.path(path_filtBF, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtoutB <- filterAndTrim(file.path(path_rawBF, fastqsBF), file.path(path_filtBF, paste0(namesBF, "filt.fastq.gz")), file.path(path_rawBR, fastqsBR), file.path(path_filtBR, paste0(namesBR, "filt.fastq.gz")), trimLeft = c(20,20), trimRight=c(20,50), maxN=0, maxEE=c(2,2), verbose=TRUE)
saveRDS(filtoutB, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COI/5-May03-2024/FiltOutput.rds")
1+1
saveRDS(filtoutB, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COI/5-May03-2024/FiltOutput.rds")
saveRDS(filtoutB, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/FiltOutput.rds")
filtoutB
dim(filtoutB)
# Order by filtered read amount
filtoutB[order(filtoutB[,2], decreasing=FALSE),]
# Compare total raw in and filtered out read amounts
colSums(filtoutB)
write.csv(filtoutB, file.path(path_outputs, "FiltOutput.csv"))
filttrendB <- ggplot(as.data.frame(filtoutB)) + geom_point(aes(row.names(filtoutB), reads.in), color = "blue") + geom_point(aes(row.names(filtoutB), reads.out), color = "orange") + ggtitle("Filter Trends for AMC BF2/BR2 Reads")
filttrendB
ggsave("FilterTrends.png", plot = filttrendB, path = path_outputs, width = 6, height = 4, units = "in")
set.seed(0743)
# BForward
#
# create a list of files in the path
filtnamesBFinter <- list.files(path_filtBF, full.names = TRUE)
# Specify I only want the files with the .gz extension
filtnamesBF <- filtnamesBFinter[grepl('.gz$', filtnamesBFinter)]
# Extract just the file name, not the path, and remove the .gz extension. This leaves on the .fastq extension
fastqfiltBF <- tools::file_path_sans_ext(basename(filtnamesBF))
# Remove the .fastq extension
namesBFfilt <- tools::file_path_sans_ext(basename(fastqfiltBF))
# BReverse
filtnamesBRinter <- list.files(path_filtBR, full.names = TRUE)
filtnamesBR <- filtnamesBRinter[grepl('.gz$', filtnamesBRinter)]
fastqfiltBR <- tools::file_path_sans_ext(basename(filtnamesBR))
namesBRfilt <- tools::file_path_sans_ext(basename(fastqfiltBR))
derepBF <- derepFastq(filtnamesBF, verbose = TRUE)
derepBR <- derepFastq(filtnamesBR, verbose = TRUE)
errBF <- learnErrors(derepBF, multithread = FALSE, randomize = TRUE)
saveRDS(errBF, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/ForwardError.rds")
ggsave("ForwardError.png", plot = errBF, path = path_outputs, width = 6, height = 4, units = "in")
ggsave("Forward_ErrorPlot.png", path = path_outputs, plotErrors(errBF, nominalQ = TRUE), width = 6, height = 4, units = "in")
errBR <- learnErrors(derepBR, multithread = FALSE, randomize = TRUE)
saveRDS(errBR, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/ReverseError.rds")
ggsave("Reverse_ErrorPlot.png", path = path_outputs, plotErrors(errBR, nominalQ = TRUE), width = 6, height = 4, units = "in")
# This takes a long time. If you have to do it again, include this:
beep(sound = "fanfare")
dadaBF <- dada(derepBF, err = errBF, multithread = FALSE)
print("dada BF finished")
beep(sound = "coin")
dadaBR <- dada(derepBR, err = errBR, multithread = FALSE)
print("dada BR finished")
beep(sound = "fanfare")
# Save all in case I need to reload the dada objects
saveRDS(dadaBF, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BForward_SampleComp.rds")
saveRDS(dadaBR, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BReverse_SampleComp.rds")
mergersB <- mergePairs(dadaBF, derepBF, dadaBR, derepBR, verbose = TRUE)
head(mergersB[[1]])
saveRDS(mergersB, "C:/Users/bydav/Desktop/MathFilterTestAMC/BMergedSampleComp.rds")
mergersB <- mergePairs(dadaBF, derepBF, dadaBR, derepBR, verbose = TRUE)
head(mergersB[[1]])
saveRDS(mergersB, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BMergedSampleComp.rds")
seqtabB <- makeSequenceTable(mergersB)
dim(seqtabB)
saveRDS(seqtabB, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BMerged Sequence Table.rds")
dim(seqtabB)
table(nchar(getSequences(seqtabB)))
seqtabB.nochim <- removeBimeraDenovo(seqtabB, method = "consensus", multithread = FALSE, verbose = TRUE)
dim(seqtabB.nochim)
saveRDS(seqtabB.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BMerged Sequence No Chimera Table.rds")
beep(sound = "coin")
dim(seqtabB.nochim)
table(nchar(getSequences(seqtabB.nochim)))
getN <- function(x) sum(getUniques(x))
trackB <- cbind(filtoutBsync, sapply(dadaBF, getN), sapply(dadaBR, getN), sapply(mergersB, getN), rowSums(seqtabB.nochim))
getN <- function(x) sum(getUniques(x))
trackB <- cbind(filtoutB, sapply(dadaBF, getN), sapply(dadaBR, getN), sapply(mergersB, getN), rowSums(seqtabB.nochim))
colnames(trackB) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
head(trackB)
write.csv(trackB, file.path(path_outputs, "WorkflowVerification.csv"))
# Very slow and intensive
all.taxa <- assignTaxonomy(seqtabB.nochim, 'C:/Users/bydav/Desktop/RefDB_Dev/output/3-May19-2024/COI_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
beep(sound = "fanfare")
write.csv(all.taxa, file.path(path_outputs, "COIAMC_AssignedTaxa.csv"))
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
path_filt12F
filtout12sync <- filterAndTrim(file.path(path_raw12F, fastqs12F), file.path(path_filt12F, paste0(names12F, "filt.fastq.gz")), file.path(path_raw12R, fastqs12R), file.path(path_filt12R, paste0(names12R, "filt.fastq.gz")), trimLeft = c(21,27), trimRight=c(80), maxN=0, maxEE=c(2,2), verbose=TRUE)
beep(sound = "fanfare")
dim(filtout12sync)
# Order by filtered read amount
filtout12sync[order(filtout12sync[,2], decreasing=FALSE),]
# Compare total raw in and filtered out read amounts
colSums(filtout12sync)
write.csv(filtout12sync, file.path(path_outputs, "FiltoutputTable.csv"))
filtout12sync
filttrend12sync <- ggplot(as.data.frame(filtout12sync)) + geom_point(aes(row.names(filtout12sync), reads.in), color = "blue") + geom_point(aes(row.names(filtout12sync), reads.out), color = "orange") + ggtitle("Filter Trends for AMC 12 Synced Forward Reads")
filttrend12sync
ggsave("FilterTrends_12Sync.png", plot = filttrend12sync, path = path_outputs, width = 6, height = 4, units = "in")
set.seed(9450)
# Set the names for the filtered files we'll be using
# create a list of files in the path
filtnames12Finter <- list.files(path_filt12F, full.names = TRUE)
# Specify I only want the files with the .gz extension
filtnames12F <- filtnames12Finter[grepl('.gz$', filtnames12Finter)]
# Extract just the file name, not the path, and remove the .gz extension. This leaves on the .fastq extension
fastqfilt12F <- tools::file_path_sans_ext(basename(filtnames12F))
# Remove the .fastq extension
names12Ffilt <- tools::file_path_sans_ext(basename(fastqfilt12F))
# 12Reverse
filtnames12Rinter <- list.files(path_filt12R, full.names = TRUE)
filtnames12R <- filtnames12Rinter[grepl('.gz$', filtnames12Rinter)]
fastqfilt12R <- tools::file_path_sans_ext(basename(filtnames12R))
names12Rfilt <- tools::file_path_sans_ext(basename(fastqfilt12R))
derep12F <- derepFastq(filtnames12F, verbose=TRUE)
derep12R <- derepFastq(filtnames12R, verbose=TRUE)
# Forward error rates
err12F <- learnErrors(derep12F, multithread = FALSE, randomize = TRUE)
saveRDS(err12F, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Forward_Error.rds")
ggsave("12Forward_ErrorPlot.png", path = path_outputs, plotErrors(err12F, nominalQ = TRUE), width = 6, height = 4, units = "in")
# Reverse error rates
err12R <- learnErrors(derep12R, multithread = FALSE, randomize = TRUE)
saveRDS(err12R, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Reverse_Error.rds")
ggsave("12Reverse_ErrorPlot.png", path = path_outputs, plotErrors(err12R, nominalQ = TRUE), width = 6, height = 4, units = "in")
# This takes a long time. If you have to do it again, include this:
beep(sound = "fanfare")
dada12F <- dada(derep12F, err = err12F, multithread = FALSE)
print("dada 12F finished")
beep(sound = "coin")
dada12R <- dada(derep12R, err = err12R, multithread = FALSE)
print("dada 12R finished")
beep(sound = "fanfare")
# Save all in case I need to reload the dada objects
saveRDS(dada12F, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Forward_SampleComp.rds")
saveRDS(dada12R, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Reverse_SampleComp.rds")
mergers12 <- mergePairs(dada12F, path_filt12F, dada12R, path_filt12R, verbose=TRUE)
# Update formatting into a matrix array
mergers12 <- makeSequenceTable(mergers12)
# Inspect the merger data.frame from the first sample
head(mergers12[[1]])
saveRDS(mergers12, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12MergedSampleComp.rds")
seqtab12.nochim <- removeBimeraDenovo(mergers12, method = "consensus", multithread = FALSE, verbose = TRUE)
# Save output
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Merged Sequence No Chimera Table.rds")
beep(sound = "coin")
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
# Very slow and intensive
all.taxa <- assignTaxonomy(seqtab12.nochim, 'C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
beep(sound = "fanfare")
write.csv(all.taxa, file.path(path_outputs, "12SAMC_AssignedTaxa.csv"), row.names = FALSE)
installed.packages()
version
# Set version and date for each time the analysis script is run - SET THIS EVERY TIME YOU RUN A NEW SET
versiondate <- c("6-Jun03-2024/")
source("C:/Users/bydav/Desktop/GitHub/UM_FSM_AMC22-23/AMC12S_config.R")
packages
installed.packages(packages)
package_version(packages)
package_version(ggplot2)
package_version("ggplot2")
source("AMC12S_config.R")
dada12F <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Forward_SampleComp.rds")
dada12R <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Reverse_SampleComp.rds")
filtout12sync <- read.csv(file.path(path_outputs, "FiltoutputTable.csv"))
mergers12 <- mergePairs(dada12F, path_filt12F, dada12R, path_filt12R, verbose=TRUE)
# Update formatting into a matrix array
seqtab <- makeSequenceTable(mergers12)
# Inspect the merger data.frame from the first sample
head(seqtab[[1]])
saveRDS(seqtab, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12MergedSampleComp.rds")
seqtab12.nochim <- removeBimeraDenovo(seqtab, method = "consensus", multithread = FALSE, verbose = TRUE)
# Save output
saveRDS(seqtab12.nochim, "G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Merged Sequence No Chimera Table.rds")
beep(sound = "coin")
getN <- function(x) sum(getUniques(x))
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
length(dada12F) = length(filtout12sync)
View(dada12F)
length(dada12R) = length(filtout12sync)
length(seqtab12.nochim) = length(filtout12sync)
length(mergers12) = length(filtout12sync)
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(mergers12, getN), rowSums(seqtab12.nochim))
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Merged Sequence No Chimera Table.rds")
# Update formatting into a matrix array
seqtab <- makeSequenceTable(mergers12)
seqtab <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12MergedSampleComp.rds")
dada12F <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Forward_SampleComp.rds")
dada12R <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Reverse_SampleComp.rds")
track12 <- cbind(filtout12sync, sapply(dada12F, getN), sapply(dada12R, getN), sapply(seqtab, getN), rowSums(seqtab12.nochim))
source("AMCCOI_config.R")
all.taxa <- read.csv(file.path(path_outputs, "COIAMC_AssignedTaxa.csv"))
row.names(all.taxa)
all.taxa[1]
seqtabB.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BMerged Sequence No Chimera Table.rds")
all.taxa <- data.frame(all.taxa, row.names = 1)
row.names(all.taxa)
# Identify metadata and reference database locations
meta <- read.csv("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/AMCMeta.csv")
row.names(seqtabB.nochim)
row.names(meta)
meta <- data.frame(meta, row.names = 1)
row.names(meta)
row.names(meta) == row.names(seqtabB.nochim)
# Repeat file_path_sans_ext to also remove the .fastq
namesmetaI <- tools::file_path_sans_ext(basename(row.names(meta)))
namesmetaI
namesmeta <- tools::file_path_sans_ext(namesmetaI)
namesmeta
regexp <- "([[:alnum:]]+_)[[:alnum:]]+"
# process string
testnamemeta <- (str_extract(namesmeta, regexp))
library(stringr)
regexp <- "([[:alnum:]]+_)[[:alnum:]]+"
# process string
testnamemeta <- (str_extract(namesmeta, regexp))
testnamemeta
alltaxa <- data.frame(all.taxa, row.names = testnamemeta)
alltaxa <- data.frame(all.taxa)
row.names(alltaxa) <- testnamemeta
row.names(alltaxa) <- c(testnamemeta)
rownames(alltaxa) <- c(testnamemeta)
row.names(meta)
# Repeat file_path_sans_ext to also remove the .fastq
row.names(meta) <- tools::file_path_sans_ext(basename(row.names(meta)))
rownames(alltaxa) <- testnamemeta
row.names(alltaxa) <- c("testnamemeta")
row.names(alltaxa) <- c(testnamemeta)
View(alltaxa)
row.names(meta) <- c(testnamemeta)
View(meta)
row.names(meta) <- testnamemeta
# Identify metadata and reference database locations
meta <- read.csv("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/AMCMeta.csv")
meta$sample <- c(testnamemeta)
meta$sample <- testnamemeta
# Repeat file_path_sans_ext to also remove the .fastq
meta$sample <- tools::file_path_sans_ext(basename(meta$sample))
# Repeat file_path_sans_ext to also remove the .fastq
meta$sample <- tools::file_path_sans_ext(basename(sample))
source("AMC12S_config.R")
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Merged Sequence No Chimera Table.rds")
read.csv(file.path(path_outputs, "12SAMC_AssignedTaxa.csv"), header = TRUE)
# Very slow and intensive
all.taxa <- assignTaxonomy(seqtab12.nochim, 'C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/12S_REFDB.fasta', tryRC = TRUE, verbose = TRUE)
beep(sound = "fanfare")
write.csv(all.taxa, file.path(path_outputs, "12SAMC_AssignedTaxa.csv"))
row.names(all.taxa)
row.names(seqtab12.nochim)
row.names(meta)
meta1 <- df(meta, row.names = 1)
meta2 <- data.frame(meta, row.names = 1)
source("AMCCOI_config.R")
seqtabB.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/COIB/5-May03-2024/BMerged Sequence No Chimera Table.rds")
row.names(seqtabB.nochim)
rownames <- row.names(seqtabB.nochim)
regexp <- "([[:alnum:]]+_)[[:alnum:]]+"
# process string
newnames <- (str_extract(rownames, regexp))
row.names(seqtabB.nochim) <- newnames
row.names(meta)
row.names(seqtabB.nochim) == row.names(meta)
row.names(seqtabB.nochim)
all.taxa <- read.csv(file.path(path_outputs, "COIAMC_AssignedTaxa.csv"))
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(all.taxa))
taxa_names()
View(all.taxa)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix)all.taxa)))
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
View(seqtabB.nochim)
class(seqtabB.nochim)
class(meta)
class(all.taxa)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(as.matrix(meta)), tax_table(as.matrix(all.taxa)))
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtabB.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
View(seqtabB.nochim)
source("AMC12S_config.R")
seqtab12.nochim <- readRDS("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/dataoutputs/12S/6-Jun03-2024/12Merged Sequence No Chimera Table.rds")
row.names(seqtab12.nochim)
rownames <- row.names(seqtab12.nochim)
regexp <- "([[:alnum:]]+_)[[:alnum:]]+"
# process string
newnames <- (str_extract(rownames, regexp))
row.names(seqtab12.nochim) <- newnames
row.names(seqtab12.nochim)
row.names(meta)
# Identify metadata and reference database locations
meta <- read.csv("G:/My Drive/2_UMaine FSM - Field Projects/AMC/Data/AMCMeta.csv", header = TRUE, row.names=1)
row.names(meta)
all.taxa <- read.csv(file.path(path_outputs, "12SAMC_AssignedTaxa.csv"))
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtab12.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(all.taxa))
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtab12.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(as.matrix(all.taxa)))
View(seqtab12.nochim)
View(all.taxa)
# config file with paths and versioning
source("AMCCOI_config.R")
# File with previous outputs to make reloading easier
source("AMCCOI_reload.R")
# I'd like to make a stacked bar plot, before any taxa-filtering, of the read abundances
# Set function to make a proportional graph
EX_ps.func <- transform_sample_counts(EX_ps, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads - 12S")
# Warning: Removed 143 rows containing missing values or values outside the scale range (`geom_bar()`).
# Save plot
#ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
# Save plot
ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
# Config file with paths and versioning
source("AMC12S_config.R")
# Reload file with paths to previous outputs
source("AMC12S_reload.R")
# I'd like to make a stacked bar plot, before any taxa-filtering, of the read abundances
# Set function to make a proportional graph
EX_ps.func <- transform_sample_counts(EX_ps, function(x) x / sum(x) )
# Plot based on Phylum
plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads - COI")
# Warning: Removed 79588 rows containing missing values or values outside the scale range (`geom_bar()`).
# Save plot
ggsave("PreDecontam_IDProportions.png", path = path_outputs, plot_bar(EX_ps.func, fill="Phylum") + ggtitle("Proportion by Phylum of Identified Reads"), width = 7, height = 4, units = "in")
