fb9_control_vec <- as.vector(taxa_names(fbatch9_kit))
fb9_vec <- as.vector(taxa_names(fbatch9))
fb9_keep <- setdiff(fb9_vec, fb9_control_vec)
fb9_clean <- prune_taxa(fb9_keep, fbatch9)
# batch 10
fbatch10 = subset_samples(EX_ps, Fbatch == "10")
fbatch10_kit = subset_samples(fbatch10, Type == "NegCon")
fbatch10_kit <- prune_taxa(taxa_sums(fbatch10_kit) > 0, fbatch10_kit)
fb10_control_vec <- as.vector(taxa_names(fbatch10_kit))
fb10_vec <- as.vector(taxa_names(fbatch10))
fb10_keep <- setdiff(fb10_vec, fb10_control_vec)
fb10_clean <- prune_taxa(fb10_keep, fbatch10)
fbatch11 = subset_samples(EX_ps, Fbatch == "11")
fbatch11_kit = subset_samples(fbatch11, Type == "NegCon")
fbatch11_kit <- prune_taxa(taxa_sums(fbatch11_kit) > 0, fbatch11_kit)
fb11_control_vec <- as.vector(taxa_names(fbatch11_kit))
fb11_vec <- as.vector(taxa_names(fbatch11))
fb11_keep <- setdiff(fb11_vec, fb11_control_vec)
fb11_clean <- prune_taxa(fb11_keep, fbatch11)
# batch 12
fbatch12 = subset_samples(EX_ps, Fbatch == "12")
fbatch12_kit = subset_samples(fbatch12, Type == "NegCon")
fbatch13 = subset_samples(EX_ps, Fbatch == "13")
fbatch13_kit = subset_samples(fbatch13, Type == "NegCon")
fbatch13_kit <- prune_taxa(taxa_sums(fbatch13_kit) > 0, fbatch13_kit)
fbatch14 = subset_samples(EX_ps, Fbatch == "14")
fbatch14_kit = subset_samples(fbatch14, Type == "NegCon")
fbatch14_kit <- prune_taxa(taxa_sums(fbatch14_kit) > 0, fbatch14_kit)
fb14_control_vec <- as.vector(taxa_names(fbatch14_kit))
fb14_vec <- as.vector(taxa_names(fbatch14))
fb14_keep <- setdiff(fb14_vec, fb14_control_vec)
fb14_clean <- prune_taxa(fb14_keep, fbatch14)
fbatch15 = subset_samples(EX_ps, Fbatch == "15")
fbatch15_kit = subset_samples(fbatch15, Type == "NegCon")
fbatch15_kit <- prune_taxa(taxa_sums(fbatch15_kit) > 0, fbatch15_kit)
fb15_control_vec <- as.vector(taxa_names(fbatch15_kit))
fb15_vec <- as.vector(taxa_names(fbatch15))
fb15_keep <- setdiff(fb15_vec, fb15_control_vec)
fb15_clean <- prune_taxa(fb15_keep, fbatch15)
fbatch0 = subset_samples(EX_ps, Fbatch == "0")
fbatch0_kit = subset_samples(fbatch0, Type == "NegCon")
fbatch0_kit <- prune_taxa(taxa_sums(fbatch0_kit) > 0, fbatch0_kit)
fb0_control_vec <- as.vector(taxa_names(fbatch0_kit))
fb0_vec <- as.vector(taxa_names(fbatch0))
fb0_keep <- setdiff(fb0_vec, fb0_control_vec)
fb0_clean <- prune_taxa(fb0_keep, fbatch0)
# Merge the phyloseq objects back together, then remove any blank taxa or samples
EX_ps_NC_batch_clean <- merge_phyloseq(fb0_clean, fb2_clean, fb3_clean, fb5_clean, fb6_clean, fb7_clean, fb8_clean, fb9_clean, fb11_clean, fb14_clean, fb15_clean)
# Clean out taxa/SV columns that are no longer present
EX_ps_NC_batch_clean <- prune_taxa(taxa_sums(EX_ps_NC_batch_clean) > 0, EX_ps_NC_batch_clean)
EX_ps_NC_batch_clean <- prune_samples(sample_sums(EX_ps_NC_batch_clean) > 0, EX_ps_NC_batch_clean)
EX_ps_NC_batch_clean
EX_cleaner.ord <- ordinate(EX_ps_NC_batch_clean, method ="PCoA", "jaccard", binary = TRUE)
plot_ordination(EX_ps_NC_batch_clean, EX_cleaner.ord, type="samples", color="Treatment", title="Jaccard Binary Ordination Post-Decontam")
plot_ordination(EX_ps_NC_batch_clean, EX_cleaner.ord, type="samples", color="Fbatch", title="Jaccard Binary Ordination Post-Decontam")
plot_ordination(EX_ps_NC_batch_clean, EX_cleaner.ord, type="samples", color="Fbatch", title="Prelim 12S Jaccard Binary Ordination Post-Decontam")
rc <-as.data.frame(otu_table(EX_ps_NC_batch_clean))
test <- rarecurve(rc, step = 10, cex=0.5, label = TRUE)
install.packages("vegan")
library(vegan)
rc <-as.data.frame(otu_table(EX_ps_NC_batch_clean))
test <- rarecurve(rc, step = 10, cex=0.5, label = TRUE)
rc <-as.data.frame(otu_table(EX_ps_NC_batch_clean))
test <- rarecurve(rc, step = 10, cex=0.5, label = FALSE)
# look at rowsums (total sequences per sample)
rowSums(otu_table(EX_ps_NC_batch_clean))
col <- c("black", "darkred", "forestgreen", "orange", "blue", "yellow", "hotpink")
lty <- c("solid", "dashed", "longdash", "dotdash")
# rerun curve
test <- rarecurve(rc, step = 10, cex=0.5, col = col, lty = lty, label = FALSE)
raremax <- max(rowSums(otu_table(EX_ps_clean)))
raremax <- max(rowSums(otu_table(EX_ps_NC_batch_clean)))
raremax
raremin <- min(rowSums(otu_table(EX_ps_NC_batch_clean)))
raremin
sort(rowSums(otu_table(EX_ps_NC_batch_clean)))
plot_heatmap(EX_ps_NC_batch_clean, fill="Family") + theme(legend.position = "bottom") + theme(axis.text.x = element_blank())
plot_heatmap(EX_ps_NC_batch_clean, fill="Phylum") + theme(legend.position = "bottom") + theme(axis.text.x = element_blank())
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_NC_batch_clean, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Phylum")
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:100], EX_ps_NC_batch_clean)
physeqhigh = prune_taxa(taxa_names(EX_ps_NC_batch_clean)[1:100], EX_ps_NC_batch_clean)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Phylum")
EX_ps_clean <- EX_ps_NC_batch_clean %>%
# CHANGE ME to reflect the phyloseq object name you have
subset_taxa(Kingdom != "Bacteria" & Genus != "Homo")
library(dplyr)
EX_ps_clean <- EX_ps_NC_batch_clean %>%
# CHANGE ME to reflect the phyloseq object name you have
subset_taxa(Kingdom != "Bacteria" & Genus != "Homo")
# CHANGE ME to the things you want to remove
#
EX_ps_clean
EX_ps_clean <- prune_taxa(taxa_sums(EX_ps_clean) > 0, EX_ps_clean)
EX_ps_clean <- prune_samples(sample_sums(EX_ps_clean) > 0, EX_ps_clean)
EX_ps_clean
saveRDS(EX_ps_clean, 'C:/Users/bydav/Desktop/12SPrelim_EX_ps_clean.RDS')
rc <-as.data.frame(otu_table(EX_ps_clean))
test <- rarecurve(rc, step = 10, cex=0.5, label = FALSE)
raremax <- max(rowSums(otu_table(EX_ps_clean)))
raremax
raremin <- min(rowSums(otu_table(EX_ps_clean)))
raremin
sort(rowSums(otu_table(EX_ps_clean)))
EX_ps_clean.rar <- rarefy_even_depth(EX_ps_clean, sample.size=5000,
# CHANGE ME to the SVs/sample you want. 5-10k is a good amount, more is better
replace=FALSE, #sampling with or without replacement
trimOTUs=TRUE, #remove SVs left empty (called OTUs here but really they are SVs)
rngseed=711, verbose=TRUE)
EX_ps_clean.rar
saveRDS(EX_ps_clean.rar, 'C:/Users/bydav/Desktop/12SPrelim_EX_ps_cleanrar.RDS')
# All Taxa
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Phylum")
# Top 100 by abundance only
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:100], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Phylum")
# Lowest 100 by abundance only
physeqlow = prune_taxa(taxa_names(EX_ps_clean.rar)[5968:6068], EX_ps_clean.rar)
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Class")
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Order")
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Family")
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:100], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
physeqlow = prune_taxa(taxa_names(EX_ps_clean.rar)[5968:6068], EX_ps_clean.rar)
dim(EX_ps_clean.rar)
View(EX_ps_clean.rar)
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
physeqlow = prune_taxa(taxa_names(EX_ps_clean.rar)[60:110], EX_ps_clean.rar)
physeqlowbars = transform_sample_counts(physeqlow, function(x) x / sum(x) )
plot_bar(physeqlowbars, fill="Family")
dendrogram_phyloseq(EX_ps_clean.rar, colors = 'spectral)
get_taxa_unique(EX_ps_clean.rar, taxonomic.rank="Family", errorIfNULL=TRUE)
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
??plot_bar
dendrogram_phyloseq(EX_ps_clean.rar, colors = 'spectral')
library(dada2)
library(ggplot2)
library(beepr)
library(phyloseq)
library(vegan)
library(dplyr)
dendrogram_phyloseq(EX_ps_clean.rar, colors = 'spectral')
install.packages("phylosmith")
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Species")
sample_data(EX_ps_clean.rar)
taxa_names(EX_ps_clean.rar)
taxa_table(EX_ps_clean.rar)
physeqlow
physeqlow(tax_table)
plot_bar(EX_ps_clean.rar.stacked, fill="Genus")
# All Taxa
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Genus")
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Genus")
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:10], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Genus")
meta <- read.csv("C:/Users/bydav/Desktop/AMCMeta.csv", row.names = FALSE)
meta <- read.csv("C:/Users/bydav/Desktop/AMCMeta.csv")
# Convince R by force that they match - this is a flat replacement, not a match-up
row.names(meta) <- row.names(seqtab12.nochim)
head(meta)
# Create phyloseq object with all samples
EX_ps <- phyloseq(otu_table(seqtab12.nochim, taxa_are_rows=FALSE), sample_data(meta), tax_table(all.taxa))
# Subset controls
EX_ps_controls = subset_samples(EX_ps, Type == "NegCon")
EX_ps_controls <- prune_taxa(taxa_sums(EX_ps_controls) > 0, EX_ps_controls)
# To view columns in a phyloseq object:
sample_data(EX_ps)$Fbatch
# subset each DNA extraction batch
fbatch2 = subset_samples(EX_ps, Fbatch == "2")
# subset controls and prune to only those taxa
fbatch2_kit = subset_samples(fbatch2, Type == "NegCon")
fbatch2_kit <- prune_taxa(taxa_sums(fbatch2_kit) > 0, fbatch2_kit)
# Make the taxa names into a vector so you can remove them, then use the keep vector for the prune taxa argument, because it wants the argument to be true (matching), and repeat for all batches
fb2_control_vec <- as.vector(taxa_names(fbatch2_kit))
fb2_vec <- as.vector(taxa_names(fbatch2))
fb2_keep <- setdiff(fb2_vec, fb2_control_vec)
fb2_clean <- prune_taxa(fb2_keep, fbatch2)
# batch 3
fbatch3 = subset_samples(EX_ps, Fbatch == "3")
fbatch3_kit = subset_samples(fbatch3, Type == "NegCon")
fbatch3_kit <- prune_taxa(taxa_sums(fbatch3_kit) > 0, fbatch3_kit)
fb3_control_vec <- as.vector(taxa_names(fbatch3_kit))
fb3_vec <- as.vector(taxa_names(fbatch3))
fb3_keep <- setdiff(fb3_vec, fb3_control_vec)
fb3_clean <- prune_taxa(fb3_keep, fbatch3)
# batch 4
#fbatch4 = subset_samples(EX_ps, Fbatch == "4")
#fbatch4_kit = subset_samples(fbatch4, Type == "NegCon")
#fbatch4_kit <- prune_taxa(taxa_sums(fbatch4_kit) > 0, fbatch4_kit)
#fb4_control_vec <- as.vector(taxa_names(fbatch4_kit))
#fb4_vec <- as.vector(taxa_names(fbatch4))
#fb4_keep <- setdiff(fb4_vec, fb4_control_vec)
#fb4_clean <- prune_taxa(fb4_keep, fbatch4)
# batch 5
fbatch5 = subset_samples(EX_ps, Fbatch == "5")
fbatch5_kit = subset_samples(fbatch5, Type == "NegCon")
fbatch5_kit <- prune_taxa(taxa_sums(fbatch5_kit) > 0, fbatch5_kit)
fb5_control_vec <- as.vector(taxa_names(fbatch5_kit))
fb5_vec <- as.vector(taxa_names(fbatch5))
fb5_keep <- setdiff(fb5_vec, fb5_control_vec)
fb5_clean <- prune_taxa(fb5_keep, fbatch5)
# batch 6
fbatch6 = subset_samples(EX_ps, Fbatch == "6")
fbatch6_kit = subset_samples(fbatch6, Type == "NegCon")
fbatch6_kit <- prune_taxa(taxa_sums(fbatch6_kit) > 0, fbatch6_kit)
fb6_control_vec <- as.vector(taxa_names(fbatch6_kit))
fb6_vec <- as.vector(taxa_names(fbatch6))
fb6_keep <- setdiff(fb6_vec, fb6_control_vec)
fb6_clean <- prune_taxa(fb6_keep, fbatch6)
# batch 7
fbatch7 = subset_samples(EX_ps, Fbatch == "7")
fbatch7_kit = subset_samples(fbatch7, Type == "NegCon")
fbatch7_kit <- prune_taxa(taxa_sums(fbatch7_kit) > 0, fbatch7_kit)
fb7_control_vec <- as.vector(taxa_names(fbatch7_kit))
fb7_vec <- as.vector(taxa_names(fbatch7))
fb7_keep <- setdiff(fb7_vec, fb7_control_vec)
fb7_clean <- prune_taxa(fb7_keep, fbatch7)
# batch 8
fbatch8 = subset_samples(EX_ps, Fbatch == "8")
fbatch8_kit = subset_samples(fbatch8, Type == "NegCon")
fbatch8_kit <- prune_taxa(taxa_sums(fbatch8_kit) > 0, fbatch8_kit)
fb8_control_vec <- as.vector(taxa_names(fbatch8_kit))
fb8_vec <- as.vector(taxa_names(fbatch8))
fb8_keep <- setdiff(fb8_vec, fb8_control_vec)
fb8_clean <- prune_taxa(fb8_keep, fbatch8)
# batch 9
fbatch9 = subset_samples(EX_ps, Fbatch == "9")
fbatch9_kit = subset_samples(fbatch9, Type == "NegCon")
fbatch9_kit <- prune_taxa(taxa_sums(fbatch9_kit) > 0, fbatch9_kit)
fb9_control_vec <- as.vector(taxa_names(fbatch9_kit))
fb9_vec <- as.vector(taxa_names(fbatch9))
fb9_keep <- setdiff(fb9_vec, fb9_control_vec)
fb9_clean <- prune_taxa(fb9_keep, fbatch9)
# batch 10
fbatch10 = subset_samples(EX_ps, Fbatch == "10")
fbatch10_kit = subset_samples(fbatch10, Type == "NegCon")
fbatch10_kit <- prune_taxa(taxa_sums(fbatch10_kit) > 0, fbatch10_kit)
fbatch11 = subset_samples(EX_ps, Fbatch == "11")
fbatch11_kit = subset_samples(fbatch11, Type == "NegCon")
fbatch11_kit <- prune_taxa(taxa_sums(fbatch11_kit) > 0, fbatch11_kit)
fb11_control_vec <- as.vector(taxa_names(fbatch11_kit))
fb11_vec <- as.vector(taxa_names(fbatch11))
fb11_keep <- setdiff(fb11_vec, fb11_control_vec)
fb11_clean <- prune_taxa(fb11_keep, fbatch11)
fbatch13 = subset_samples(EX_ps, Fbatch == "13")
fbatch13_kit = subset_samples(fbatch13, Type == "NegCon")
fbatch13_kit <- prune_taxa(taxa_sums(fbatch13_kit) > 0, fbatch13_kit)
fbatch14 = subset_samples(EX_ps, Fbatch == "14")
fbatch14_kit = subset_samples(fbatch14, Type == "NegCon")
fbatch14_kit <- prune_taxa(taxa_sums(fbatch14_kit) > 0, fbatch14_kit)
fb14_control_vec <- as.vector(taxa_names(fbatch14_kit))
fb14_vec <- as.vector(taxa_names(fbatch14))
fb14_keep <- setdiff(fb14_vec, fb14_control_vec)
fb14_clean <- prune_taxa(fb14_keep, fbatch14)
fbatch15 = subset_samples(EX_ps, Fbatch == "15")
fbatch15_kit = subset_samples(fbatch15, Type == "NegCon")
fbatch15_kit <- prune_taxa(taxa_sums(fbatch15_kit) > 0, fbatch15_kit)
fb15_control_vec <- as.vector(taxa_names(fbatch15_kit))
fb15_vec <- as.vector(taxa_names(fbatch15))
fb15_keep <- setdiff(fb15_vec, fb15_control_vec)
fb15_clean <- prune_taxa(fb15_keep, fbatch15)
# batch 0
fbatch0 = subset_samples(EX_ps, Fbatch == "0")
fbatch0_kit = subset_samples(fbatch0, Type == "NegCon")
fbatch0_kit <- prune_taxa(taxa_sums(fbatch0_kit) > 0, fbatch0_kit)
fb0_control_vec <- as.vector(taxa_names(fbatch0_kit))
fb0_vec <- as.vector(taxa_names(fbatch0))
fb0_keep <- setdiff(fb0_vec, fb0_control_vec)
fb0_clean <- prune_taxa(fb0_keep, fbatch0)
# Merge the phyloseq objects back together, then remove any blank taxa or samples
EX_ps_NC_batch_clean <- merge_phyloseq(fb0_clean, fb2_clean, fb3_clean, fb5_clean, fb6_clean, fb7_clean, fb8_clean, fb9_clean, fb11_clean, fb14_clean, fb15_clean)
# Clean out taxa/SV columns that are no longer present
EX_ps_NC_batch_clean <- prune_taxa(taxa_sums(EX_ps_NC_batch_clean) > 0, EX_ps_NC_batch_clean)
EX_ps_NC_batch_clean <- prune_samples(sample_sums(EX_ps_NC_batch_clean) > 0, EX_ps_NC_batch_clean)
EX_ps_NC_batch_clean
EX_ps_clean <- EX_ps_NC_batch_clean %>%
# CHANGE ME to reflect the phyloseq object name you have
subset_taxa(Kingdom != "Bacteria" & Genus != "Homo")
EX_ps_clean <- prune_taxa(taxa_sums(EX_ps_clean) > 0, EX_ps_clean)
EX_ps_clean <- prune_samples(sample_sums(EX_ps_clean) > 0, EX_ps_clean)
EX_ps_clean
saveRDS(EX_ps_clean, 'C:/Users/bydav/Desktop/12SPrelim_EX_ps_clean.RDS')
EX_ps_clean.rar <- rarefy_even_depth(EX_ps_clean, sample.size=5000,
# CHANGE ME to the SVs/sample you want. 5-10k is a good amount, more is better
replace=FALSE, #sampling with or without replacement
trimOTUs=TRUE, #remove SVs left empty (called OTUs here but really they are SVs)
rngseed=711, verbose=TRUE)
EX_ps_clean.rar
saveRDS(EX_ps_clean.rar, 'C:/Users/bydav/Desktop/12SPrelim_EX_ps_cleanrar.RDS')
plot_heatmap(EX_ps_clean.rar, fill="Family") + theme(legend.position = "bottom") + theme(axis.text.x = element_blank())
taxabund0 <- abundance_heatmap(EX_ps_clean.rar, classification = 'Family', treatment = c('Treatment'), subset = 'Pre')
library(dada2)
library(ggplot2)
library(beepr)
library(phyloseq)
library(vegan)
library(dplyr)
taxabund0 <- abundance_heatmap(EX_ps_clean.rar, classification = 'Family', treatment = c('Treatment'), subset = 'Pre')
install.packages("remotes")
remotes::install_github("schuyler-smith/phyloschuyler")
library(phylosmith)
taxa_abundance_bars(
taxa_filter(EX_ps_clean.rar, frequency = 0.8),
classification = 'Phylum', treatment = c('Treatment'),
subset = c('Pre', 'Post'), transformation = 'none')
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
proportionstreat <- taxa_proportions(EX_ps_clean.rar, 'Phylum', treatment = c('Treatment'))
# Top 50 by abundance only
physeqhigh = prune_taxa(taxa_names(EX_ps_clean.rar)[1:50], EX_ps_clean.rar)
physeqhighbars = transform_sample_counts(physeqhigh, function(x) x / sum(x) )
plot_bar(physeqhighbars, fill="Family")
EX_ps_clean.rar.stacked = transform_sample_counts(EX_ps_clean.rar, function(x) x / sum(x) )
plot_bar(EX_ps_clean.rar.stacked, fill="Family")
physeqlow = prune_taxa(taxa_names(EX_ps_clean.rar)[60:110], EX_ps_clean.rar)
physeqlowbars = transform_sample_counts(physeqlow, function(x) x / sum(x) )
plot_bar(physeqlowbars, fill="Family")
test <- subset_samples(EX_ps_clean.rar, TreatType == "Pre")
test
EX_12prelim_post <- subset_samples(EX_ps_clean.rar, TreatType == "Post")
EX_12prelim_pre <- subset_samples(EX_ps_clean.rar, TreatType == "Pre")
EX_12prelim_post
EX_12prelim_pre.stacked = transform_sample_counts(EX_12prelim_pre, function(x) x / sum(x) )
plot_bar(EX_12prelim_pre.stacked, fill="Family")
??plot_bar
plot_bar(EX_ps_clean.rar, fill = "Genus")
plot_bar(EX_ps_clean.rar, x="TreatType", fill="Genus")
plot_bar(EX_ps_clean.rar.stacked, x="TreatType", fill="Genus")
plot_bar(physeqhighbars, x="TreatType", fill="Genus")
plot_bar(physeqhighbars, x="TreatType", fill="Family")
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType)
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom")
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") #+ theme(axis.title.x = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(EX_ps_clean.rar, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
subset_samples(EX_ps_clean.rar, TreatType != "")
prelimLWA <- subset_samples(EX_ps_clean.rar, TreatType != "")
plot_bar(prelimLWA, "Family", fill="Genus", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(prelimLWA, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(prelimLWA, "Family", fill="Order", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:50], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:15], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:50], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
# Stacked plots (species proportions)
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
topprelimLWA <- prune_taxa(taxa_names(prelimLWA)[1:20], prelimLWA)
topprelimLWAbars = transform_sample_counts(topprelimLWA, function(x) x / sum(x) )
# Facet grid (abundance)
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
# Stacked plots (species proportions)
plot_bar(topprelimLWAbars, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
# Facet grid (abundance)
plot_bar(topprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
prelimLWA
lowprelimLWA <- prune_taxa(taxa_names(prelimLWA)[90:110], prelimLWA)
lowprelimLWAbars = transform_sample_counts(lowprelimLWA, function(x) x / sum(x) )
# Facet grid (abundance)
plot_bar(lowprelimLWAbars, "Family", fill="Family", facet_grid=~TreatType) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar.stacked, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(EX_ps_clean.rar, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(physeqhigh, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
physeqmid = prune_taxa(taxa_names(EX_ps_clean.rar)[1:20], EX_ps_clean.rar)
##
# What about LWA to SUR? Doubt any real difference, but could be interesting
plot_bar(physeqmid, "Family", fill="Family", facet_grid=~Treatment) + theme(legend.position = "bottom") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank()) + theme(axis.text.x = element_blank())
list(EX_ps_clean.rar, TreatType != "")
EX_ps_clean.rar
EX_ps_clean.rar(sample_data)
EX_ps_clean.rar(sample_data())
View(EX_ps_clean.rar)
plot_bar(physeqmid, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
plot_bar(EX_ps_clean.rar, fill="Family") + theme(legend.position = "right") + theme(axis.title.x = element_blank()) + theme(axis.ticks = element_blank())
sam_table(EX_ps_clean.rar)[, "Treatment"]
sam_data(EX_ps_clean.rar)[, "Treatment"]
# Identify packages to use
packages = list(
CRAN = c("rlang", "taxizedb", "rentrez", "AnnotationBustR", "ape", "ggplot2",
"argparser", "BiocManager", "remotes", "yaml", "dplyr", "readr", "tidyr"),
bioc = c("Biostrings", "genbankr"),
github = c()
)
packages$github
packages = list(
CRAN = c("ggplot2", "vegan", "beepr"),
bioc = c("BiocManager", "dada2", "phyloseq"),
github = c()
)
source(AMC12S_config.R)
source("AMC12S_config.R")
??ggsave
ggplot(mtcars, aes(mpg, wt)) +geom_point()
ggsave(path_outputs, file = "testsave.png")
test <- ggplot(mtcars, aes(mpg, wt)) +geom_point()
ggsave(path_outputs, file = "testsave.png", plot = test)
rlang::last_trace()
ggsave("testsave.png", path = path_outputs, plot = test)
source("AMC12S_config.R")
ggsave("testsave.png", path = path_outputs, plot = test)
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
# how to save with the config setup: ggsave("testsave.png", path = path_outputs, plot = test)
# 12S Forward:
plotQualityProfile(fns12Fisolate[75])
fns12Fisolate[75]
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
fns12Fisolate[75]
fns12Fisolate[74]
fns12Fisolate
source("AMC12S_config.R")
# Specify file name formats
fns12F <- list.files(path_raw12F)
fastqs12F <- fns12F[grepl('.gz$', fns12F)]
fns12R <- list.files(path_raw12R)
fastqs12R <- fns12R[grepl('.gz$', fns12R)]
# The file paths still include the desktop.ini file, so let's specify a file path to lead future code only to the fastq files in the folder
fns12Fisolate <- file.path(path_raw12F, fastqs12F)
fns12Risolate <- file.path(path_raw12R, fastqs12R)
# Set sample names to a vector, emove path and the .gz extension
names12Ffast <- tools::file_path_sans_ext(basename(fastqs12F))
# Repeat file_path_sans_ext to also remove the .fastq
names12F <- tools::file_path_sans_ext(names12Ffast)
names12Rfast <- tools::file_path_sans_ext(basename(fastqs12R))
names12R <- tools::file_path_sans_ext(names12Rfast)
fns12Fisolate[75]
# how to save with the config setup: ggsave("testsave.png", path = path_outputs, plot = test)
# 12S Forward:
plotQualityProfile(fns12Fisolate[75])
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 400, height = 600, units = "px")
ggsave("12ForwardQuality_RNG752.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 400, height = 600, units = "px")
ggsave("12ForwardQuality_RNG753.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG15.png", plot = plotQualityProfile(fns12Fisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
# 12S Forward:
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
# 12S Forward:
ggsave("12ForwardQuality_RNG75.png", path = path_outputs, plot = plotQualityProfile(fns12Fisolate[75]), width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG15.png", plot = plotQualityProfile(fns12Fisolate[15]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG63.png", plot = plotQualityProfile(fns12Fisolate[63]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG34.png", plot = plotQualityProfile(fns12Fisolate[34]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG35.png", plot = plotQualityProfile(fns12Fisolate[35]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ForwardQuality_RNG28.png", plot = plotQualityProfile(fns12Fisolate[28]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
# 12S Reverse:
ggsave("12ReverseQuality_RNG70.png", plot = plotQualityProfile(fns12Risolate[70]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG40.png", plot = plotQualityProfile(fns12Risolate[40]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG69.png", plot = plotQualityProfile(fns12Risolate[69]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG38.png", plot = plotQualityProfile(fns12Risolate[38]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG5.png", plot = plotQualityProfile(fns12Risolate[5]), path = path_outputs, width = 6, height = 4, units = "in")
ggsave("12ReverseQuality_RNG10.png", plot = plotQualityProfile(fns12Risolate[10]), path = path_outputs, width = 6, height = 4, units = "in")
beep(sound = "fanfare")
??saveRDS
